{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/test-utils.ts","mappings":";AAAA;;;GAGG;;AAWH,8CAQC;AASD,gDAMC;AAQD,oDAEC;AAMD,4CAMC;AAOD,0BAyBC;AAtFD,2BAAkE;AAClE,+BAA4B;AAC5B,2BAA4B;AAE5B;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,MAAM,GAAG,WAAW;IACpD,MAAM,OAAO,GAAG,IAAA,WAAI,EAAC,IAAA,WAAM,GAAE,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAExG,IAAI,CAAC,IAAA,eAAU,EAAC,OAAO,CAAC,EAAE,CAAC;QACzB,IAAA,cAAS,EAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAAC,OAAe,EAAE,QAAiB,EAAE,OAAgB;IACrF,MAAM,OAAO,GAAG,OAAO,IAAI,iBAAiB,EAAE,CAAC;IAC/C,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,OAAO,EAAE,QAAQ,IAAI,QAAQ,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAEtE,IAAA,kBAAa,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACjC,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,MAA2B,EAAE,OAAgB;IAChF,OAAO,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;AACrF,CAAC;AAED;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,GAAG,KAAe;IACjD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,EAAE,CAAC;YACrB,IAAA,WAAM,EAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,OAA2C;IACjE,MAAM,WAAW,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAEvC,mCAAmC;IACnC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;QACnD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,0BAA0B;IAC1B,OAAO,GAAG,EAAE;QACV,+BAA+B;QAC/B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC;gBAC1B,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/test-utils.ts"],"sourcesContent":["/**\n * Test utilities\n * General purpose testing helpers\n */\n\nimport { existsSync, mkdirSync, writeFileSync, rmSync } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\n\n/**\n * Creates a temporary directory for tests\n * @param prefix Prefix for the directory name\n * @returns Path to the created directory\n */\nexport function createTempTestDir(prefix = 'ghp-test-'): string {\n  const dirPath = join(tmpdir(), `${prefix}${Date.now()}-${Math.random().toString(36).substring(2, 10)}`);\n  \n  if (!existsSync(dirPath)) {\n    mkdirSync(dirPath, { recursive: true });\n  }\n  \n  return dirPath;\n}\n\n/**\n * Creates a temporary file with given content\n * @param content File content\n * @param fileName Optional file name\n * @param dirPath Optional directory path (creates temp dir if not provided)\n * @returns Path to the created file\n */\nexport function createTempTestFile(content: string, fileName?: string, dirPath?: string): string {\n  const testDir = dirPath || createTempTestDir();\n  const filePath = join(testDir, fileName || `test-${Date.now()}.json`);\n  \n  writeFileSync(filePath, content);\n  return filePath;\n}\n\n/**\n * Creates a temporary configuration file for tests\n * @param config Configuration object\n * @param dirPath Optional directory path\n * @returns Path to the created config file\n */\nexport function createTempConfigFile(config: Record<string, any>, dirPath?: string): string {\n  return createTempTestFile(JSON.stringify(config, null, 2), '.ghprc.json', dirPath);\n}\n\n/**\n * Cleans up temporary test files and directories\n * @param paths Paths to clean up\n */\nexport function cleanupTestFiles(...paths: string[]): void {\n  for (const path of paths) {\n    if (existsSync(path)) {\n      rmSync(path, { recursive: true, force: true });\n    }\n  }\n}\n\n/**\n * Mocks process.env for testing\n * @param envVars Environment variables to set\n * @returns Function to restore original environment\n */\nexport function mockEnv(envVars: Record<string, string | undefined>): () => void {\n  const originalEnv = { ...process.env };\n  \n  // Set mocked environment variables\n  for (const [key, value] of Object.entries(envVars)) {\n    if (value === undefined) {\n      delete process.env[key];\n    } else {\n      process.env[key] = value;\n    }\n  }\n  \n  // Return restore function\n  return () => {\n    // Restore original environment\n    for (const key of Object.keys(process.env)) {\n      if (!(key in originalEnv)) {\n        delete process.env[key];\n      }\n    }\n    \n    for (const [key, value] of Object.entries(originalEnv)) {\n      process.env[key] = value;\n    }\n  };\n} "],"version":3}