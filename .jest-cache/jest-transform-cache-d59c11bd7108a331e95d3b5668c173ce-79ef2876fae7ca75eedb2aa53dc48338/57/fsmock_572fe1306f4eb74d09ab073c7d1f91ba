9590a2b2f72346e6e756d0b10f5d5b3c
"use strict";
/**
 * Mocks pour le système de fichiers (fs)
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockFs = mockFs;
exports.mockVirtualFs = mockVirtualFs;
const fs = __importStar(require("fs"));
/**
 * Crée un mock pour le module fs
 */
function mockFs() {
    // Sauvegarde des fonctions originales
    const original = {
        existsSync: fs.existsSync,
        readFileSync: fs.readFileSync,
        writeFileSync: fs.writeFileSync,
        mkdirSync: fs.mkdirSync,
        rmSync: fs.rmSync
    };
    // Création des mocks
    jest.spyOn(fs, 'existsSync').mockImplementation(() => false);
    jest.spyOn(fs, 'readFileSync').mockImplementation(() => Buffer.from(''));
    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => undefined);
    jest.spyOn(fs, 'mkdirSync').mockImplementation(() => undefined);
    jest.spyOn(fs, 'rmSync').mockImplementation(() => undefined);
    // Fonction pour restaurer les fonctions originales
    const restore = () => {
        jest.spyOn(fs, 'existsSync').mockRestore();
        jest.spyOn(fs, 'readFileSync').mockRestore();
        jest.spyOn(fs, 'writeFileSync').mockRestore();
        jest.spyOn(fs, 'mkdirSync').mockRestore();
        jest.spyOn(fs, 'rmSync').mockRestore();
    };
    return { fs, restore };
}
/**
 * Crée un système de fichiers virtuel pour les tests
 */
function mockVirtualFs(initialFiles = {}) {
    const virtualFs = { ...initialFiles };
    // Sauvegarde des fonctions originales
    const original = {
        existsSync: fs.existsSync,
        readFileSync: fs.readFileSync,
        writeFileSync: fs.writeFileSync,
        mkdirSync: fs.mkdirSync,
        rmSync: fs.rmSync
    };
    // Mock existsSync
    jest.spyOn(fs, 'existsSync').mockImplementation((path) => {
        const pathStr = path.toString();
        return pathStr in virtualFs;
    });
    // Mock readFileSync
    jest.spyOn(fs, 'readFileSync').mockImplementation((path, options) => {
        const pathStr = path.toString();
        if (!(pathStr in virtualFs)) {
            const error = new Error(`ENOENT: no such file or directory, open '${pathStr}'`);
            error.code = 'ENOENT';
            throw error;
        }
        const content = virtualFs[pathStr];
        const encoding = typeof options === 'string' ? options : options?.encoding;
        if (typeof content === 'string' && encoding === 'utf8') {
            return content;
        }
        return Buffer.isBuffer(content) ? content : Buffer.from(String(content));
    });
    // Mock writeFileSync
    jest.spyOn(fs, 'writeFileSync').mockImplementation((path, data) => {
        const pathStr = path.toString();
        // Conversion safe pour s'assurer que data est stockée correctement
        if (Buffer.isBuffer(data)) {
            virtualFs[pathStr] = data;
        }
        else if (typeof data === 'string') {
            virtualFs[pathStr] = data;
        }
        else {
            // Pour d'autres types ArrayBufferView
            try {
                virtualFs[pathStr] = Buffer.from(data);
            }
            catch (e) {
                // Fallback en cas d'erreur
                virtualFs[pathStr] = data.toString();
            }
        }
    });
    // Mock mkdirSync
    jest.spyOn(fs, 'mkdirSync').mockImplementation((path) => {
        const pathStr = path.toString();
        virtualFs[pathStr] = '';
        return pathStr;
    });
    // Mock rmSync
    jest.spyOn(fs, 'rmSync').mockImplementation((path) => {
        const pathStr = path.toString();
        if (pathStr in virtualFs) {
            delete virtualFs[pathStr];
        }
    });
    // Fonction pour restaurer les fonctions originales
    const restore = () => {
        jest.spyOn(fs, 'existsSync').mockRestore();
        jest.spyOn(fs, 'readFileSync').mockRestore();
        jest.spyOn(fs, 'writeFileSync').mockRestore();
        jest.spyOn(fs, 'mkdirSync').mockRestore();
        jest.spyOn(fs, 'rmSync').mockRestore();
    };
    // Fonction pour accéder au système de fichiers virtuel
    const getVirtualFs = () => virtualFs;
    return { fs, restore, getVirtualFs };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,