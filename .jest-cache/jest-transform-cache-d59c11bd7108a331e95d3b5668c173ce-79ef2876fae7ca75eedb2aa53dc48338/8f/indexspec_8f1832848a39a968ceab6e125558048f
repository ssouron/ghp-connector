2ae16999cb213d5223727bf947b34149
"use strict";
/**
 * Unit tests for error handling module
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
describe('Error Types', () => {
    describe('GHPError', () => {
        it('should create a base error with default exit code', () => {
            const error = new index_1.GHPError('Base error message');
            expect(error).toBeInstanceOf(Error);
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error.message).toBe('Base error message');
            expect(error.name).toBe('GHPError');
            expect(error.exitCode).toBe(index_1.ExitCode.GeneralError);
        });
        it('should create a base error with custom exit code', () => {
            const error = new index_1.GHPError('Base error message', index_1.ExitCode.NotFoundError);
            expect(error.exitCode).toBe(index_1.ExitCode.NotFoundError);
        });
    });
    describe('ValidationError', () => {
        it('should create a validation error with correct exit code', () => {
            const error = new index_1.ValidationError('Invalid input');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.ValidationError);
            expect(error.message).toBe('Invalid input');
            expect(error.name).toBe('ValidationError');
            expect(error.exitCode).toBe(index_1.ExitCode.ValidationError);
        });
    });
    describe('NetworkError', () => {
        it('should create a network error with correct exit code', () => {
            const error = new index_1.NetworkError('Connection failed');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.NetworkError);
            expect(error.message).toBe('Connection failed');
            expect(error.name).toBe('NetworkError');
            expect(error.exitCode).toBe(index_1.ExitCode.NetworkError);
        });
    });
    describe('AuthenticationError', () => {
        it('should create an authentication error with correct exit code', () => {
            const error = new index_1.AuthenticationError('Invalid token');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.AuthenticationError);
            expect(error.message).toBe('Invalid token');
            expect(error.name).toBe('AuthenticationError');
            expect(error.exitCode).toBe(index_1.ExitCode.AuthenticationError);
        });
    });
    describe('NotFoundError', () => {
        it('should create a not found error with correct exit code', () => {
            const error = new index_1.NotFoundError('Resource not found');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.NotFoundError);
            expect(error.message).toBe('Resource not found');
            expect(error.name).toBe('NotFoundError');
            expect(error.exitCode).toBe(index_1.ExitCode.NotFoundError);
        });
    });
    describe('GitHubAPIError', () => {
        it('should create a GitHub API error with correct exit code', () => {
            const error = new index_1.GitHubAPIError('API rate limit exceeded');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.GitHubAPIError);
            expect(error.message).toBe('API rate limit exceeded');
            expect(error.name).toBe('GitHubAPIError');
            expect(error.exitCode).toBe(index_1.ExitCode.GitHubAPIError);
            expect(error.response).toBeUndefined();
        });
        it('should create a GitHub API error with response data', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API rate limit exceeded', responseData);
            expect(error.response).toBe(responseData);
        });
    });
    describe('ConfigurationError', () => {
        it('should create a configuration error with correct exit code', () => {
            const error = new index_1.ConfigurationError('Invalid configuration');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.ConfigurationError);
            expect(error.message).toBe('Invalid configuration');
            expect(error.name).toBe('ConfigurationError');
            expect(error.exitCode).toBe(index_1.ExitCode.ConfigurationError);
        });
    });
});
describe('Error Handling Functions', () => {
    describe('handleError', () => {
        let consoleErrorSpy;
        let processExitSpy;
        beforeEach(() => {
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            processExitSpy = jest.spyOn(process, 'exit').mockImplementation((() => { }));
        });
        afterEach(() => {
            consoleErrorSpy.mockRestore();
            processExitSpy.mockRestore();
        });
        it('should handle GHPError correctly', () => {
            const error = new index_1.ValidationError('Invalid input');
            (0, index_1.handleError)(error);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Invalid input');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.ValidationError);
        });
        it('should handle GitHubAPIError with response data in verbose mode', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API error', responseData);
            (0, index_1.handleError)(error, true);
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GitHubAPIError);
        });
        it('should handle GitHubAPIError without response data details in non-verbose mode', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API error', responseData);
            (0, index_1.handleError)(error, false);
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));
            expect(consoleErrorSpy).not.toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GitHubAPIError);
        });
        it('should handle non-GHPError with message', () => {
            const error = new Error('Standard error');
            (0, index_1.handleError)(error);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Standard error');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GeneralError);
        });
        it('should handle non-Error objects', () => {
            (0, index_1.handleError)('String error');
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: String error');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GeneralError);
        });
        it('should print stack trace in verbose mode', () => {
            const error = new Error('With stack');
            error.stack = 'Error: With stack\n    at file.js:1:1';
            (0, index_1.handleError)(error, true);
            expect(consoleErrorSpy).toHaveBeenCalledWith('\nStack trace:');
            expect(consoleErrorSpy).toHaveBeenCalledWith(error.stack);
        });
    });
    describe('wrapWithErrorHandler', () => {
        let handleErrorMock;
        beforeEach(() => {
            handleErrorMock = jest.spyOn(console, 'error').mockImplementation();
            jest.spyOn(process, 'exit').mockImplementation((() => { }));
        });
        afterEach(() => {
            handleErrorMock.mockRestore();
            jest.restoreAllMocks();
        });
        it('should return function result on success', async () => {
            const fn = jest.fn().mockResolvedValue('success');
            const wrapped = (0, index_1.wrapWithErrorHandler)(fn);
            const result = await wrapped('arg1', 'arg2');
            expect(result).toBe('success');
            expect(fn).toHaveBeenCalledWith('arg1', 'arg2');
        });
        it('should call handleError on error', async () => {
            const fn = jest.fn().mockRejectedValue(new Error('Test error'));
            const wrapped = (0, index_1.wrapWithErrorHandler)(fn);
            await wrapped();
            expect(handleErrorMock).toHaveBeenCalled();
        });
        it('should pass verbose flag to handleError function', async () => {
            const originalHandleError = require('./index').handleError;
            const mockHandleError = jest.fn();
            require('./index').handleError = mockHandleError;
            const error = new Error('test error');
            const fn = jest.fn().mockRejectedValue(error);
            const wrapped = (0, index_1.wrapWithErrorHandler)(fn, true);
            try {
                await wrapped();
            }
            finally {
                require('./index').handleError = originalHandleError;
            }
            expect(mockHandleError).toHaveBeenCalledWith(error, true);
        });
    });
});
describe('Exit Codes', () => {
    it('should have correct exit code values', () => {
        expect(index_1.ExitCode.Success).toBe(0);
        expect(index_1.ExitCode.GeneralError).toBe(1);
        expect(index_1.ExitCode.ValidationError).toBe(2);
        expect(index_1.ExitCode.NetworkError).toBe(3);
        expect(index_1.ExitCode.AuthenticationError).toBe(4);
        expect(index_1.ExitCode.NotFoundError).toBe(5);
        expect(index_1.ExitCode.GitHubAPIError).toBe(6);
        expect(index_1.ExitCode.ConfigurationError).toBe(7);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3N0ZXBoYW5lc291cm9uL2Rldi9iZWRkeS1ieWUtc3Rvcmllcy9naHAtY29ubmVjdG9yL3NyYy9saWIvZXJyb3JzL2luZGV4LnNwZWMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILG1DQVdpQjtBQUVqQixRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsbURBQW1ELEVBQUUsR0FBRyxFQUFFO1lBQzNELE1BQU0sS0FBSyxHQUFHLElBQUksZ0JBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxnQkFBUSxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLEdBQUcsRUFBRTtZQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLGdCQUFRLENBQUMsb0JBQW9CLEVBQUUsZ0JBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6RSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUs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QUFNLENBQUMsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGdCQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvc3RlcGhhbmVzb3Vyb24vZGV2L2JlZGR5LWJ5ZS1zdG9yaWVzL2docC1jb25uZWN0b3Ivc3JjL2xpYi9lcnJvcnMvaW5kZXguc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuaXQgdGVzdHMgZm9yIGVycm9yIGhhbmRsaW5nIG1vZHVsZVxuICovXG5cbmltcG9ydCB7IFxuICBFeGl0Q29kZSxcbiAgR0hQRXJyb3IsIFxuICBWYWxpZGF0aW9uRXJyb3IsXG4gIE5ldHdvcmtFcnJvcixcbiAgQXV0aGVudGljYXRpb25FcnJvcixcbiAgTm90Rm91bmRFcnJvcixcbiAgR2l0SHViQVBJRXJyb3IsXG4gIENvbmZpZ3VyYXRpb25FcnJvcixcbiAgaGFuZGxlRXJyb3IsXG4gIHdyYXBXaXRoRXJyb3JIYW5kbGVyXG59IGZyb20gJy4vaW5kZXgnO1xuXG5kZXNjcmliZSgnRXJyb3IgVHlwZXMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdHSFBFcnJvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGJhc2UgZXJyb3Igd2l0aCBkZWZhdWx0IGV4aXQgY29kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEdIUEVycm9yKCdCYXNlIGVycm9yIG1lc3NhZ2UnKTtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoRXJyb3IpO1xuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihHSFBFcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnQmFzZSBlcnJvciBtZXNzYWdlJyk7XG4gICAgICBleHBlY3QoZXJyb3IubmFtZSkudG9CZSgnR0hQRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5HZW5lcmFsRXJyb3IpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBiYXNlIGVycm9yIHdpdGggY3VzdG9tIGV4aXQgY29kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEdIUEVycm9yKCdCYXNlIGVycm9yIG1lc3NhZ2UnLCBFeGl0Q29kZS5Ob3RGb3VuZEVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5Ob3RGb3VuZEVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1ZhbGlkYXRpb25FcnJvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIHZhbGlkYXRpb24gZXJyb3Igd2l0aCBjb3JyZWN0IGV4aXQgY29kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcignSW52YWxpZCBpbnB1dCcpO1xuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihHSFBFcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKFZhbGlkYXRpb25FcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnSW52YWxpZCBpbnB1dCcpO1xuICAgICAgZXhwZWN0KGVycm9yLm5hbWUpLnRvQmUoJ1ZhbGlkYXRpb25FcnJvcicpO1xuICAgICAgZXhwZWN0KGVycm9yLmV4aXRDb2RlKS50b0JlKEV4aXRDb2RlLlZhbGlkYXRpb25FcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdOZXR3b3JrRXJyb3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXR3b3JrIGVycm9yIHdpdGggY29ycmVjdCBleGl0IGNvZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBOZXR3b3JrRXJyb3IoJ0Nvbm5lY3Rpb24gZmFpbGVkJyk7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKEdIUEVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoTmV0d29ya0Vycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdDb25uZWN0aW9uIGZhaWxlZCcpO1xuICAgICAgZXhwZWN0KGVycm9yLm5hbWUpLnRvQmUoJ05ldHdvcmtFcnJvcicpO1xuICAgICAgZXhwZWN0KGVycm9yLmV4aXRDb2RlKS50b0JlKEV4aXRDb2RlLk5ldHdvcmtFcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBdXRoZW50aWNhdGlvbkVycm9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIGF1dGhlbnRpY2F0aW9uIGVycm9yIHdpdGggY29ycmVjdCBleGl0IGNvZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBdXRoZW50aWNhdGlvbkVycm9yKCdJbnZhbGlkIHRva2VuJyk7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKEdIUEVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoQXV0aGVudGljYXRpb25FcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnSW52YWxpZCB0b2tlbicpO1xuICAgICAgZXhwZWN0KGVycm9yLm5hbWUpLnRvQmUoJ0F1dGhlbnRpY2F0aW9uRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5BdXRoZW50aWNhdGlvbkVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ05vdEZvdW5kRXJyb3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBub3QgZm91bmQgZXJyb3Igd2l0aCBjb3JyZWN0IGV4aXQgY29kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IE5vdEZvdW5kRXJyb3IoJ1Jlc291cmNlIG5vdCBmb3VuZCcpO1xuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihHSFBFcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKE5vdEZvdW5kRXJyb3IpO1xuICAgICAgZXhwZWN0KGVycm9yLm1lc3NhZ2UpLnRvQmUoJ1Jlc291cmNlIG5vdCBmb3VuZCcpO1xuICAgICAgZXhwZWN0KGVycm9yLm5hbWUpLnRvQmUoJ05vdEZvdW5kRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5Ob3RGb3VuZEVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dpdEh1YkFQSUVycm9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgR2l0SHViIEFQSSBlcnJvciB3aXRoIGNvcnJlY3QgZXhpdCBjb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgR2l0SHViQVBJRXJyb3IoJ0FQSSByYXRlIGxpbWl0IGV4Y2VlZGVkJyk7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKEdIUEVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoR2l0SHViQVBJRXJyb3IpO1xuICAgICAgZXhwZWN0KGVycm9yLm1lc3NhZ2UpLnRvQmUoJ0FQSSByYXRlIGxpbWl0IGV4Y2VlZGVkJyk7XG4gICAgICBleHBlY3QoZXJyb3IubmFtZSkudG9CZSgnR2l0SHViQVBJRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5HaXRIdWJBUElFcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IucmVzcG9uc2UpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgR2l0SHViIEFQSSBlcnJvciB3aXRoIHJlc3BvbnNlIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSB7IHN0YXR1czogNDAzLCBtZXNzYWdlOiAnUmF0ZSBsaW1pdCBleGNlZWRlZCcgfTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEdpdEh1YkFQSUVycm9yKCdBUEkgcmF0ZSBsaW1pdCBleGNlZWRlZCcsIHJlc3BvbnNlRGF0YSk7XG4gICAgICBleHBlY3QoZXJyb3IucmVzcG9uc2UpLnRvQmUocmVzcG9uc2VEYXRhKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbmZpZ3VyYXRpb25FcnJvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGNvbmZpZ3VyYXRpb24gZXJyb3Igd2l0aCBjb3JyZWN0IGV4aXQgY29kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IENvbmZpZ3VyYXRpb25FcnJvcignSW52YWxpZCBjb25maWd1cmF0aW9uJyk7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKEdIUEVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoQ29uZmlndXJhdGlvbkVycm9yKTtcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdJbnZhbGlkIGNvbmZpZ3VyYXRpb24nKTtcbiAgICAgIGV4cGVjdChlcnJvci5uYW1lKS50b0JlKCdDb25maWd1cmF0aW9uRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5leGl0Q29kZSkudG9CZShFeGl0Q29kZS5Db25maWd1cmF0aW9uRXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcgRnVuY3Rpb25zJywgKCkgPT4ge1xuICBkZXNjcmliZSgnaGFuZGxlRXJyb3InLCAoKSA9PiB7XG4gICAgbGV0IGNvbnNvbGVFcnJvclNweTogamVzdC5TcHlJbnN0YW5jZTtcbiAgICBsZXQgcHJvY2Vzc0V4aXRTcHk6IGplc3QuU3B5SW5zdGFuY2U7XG4gICAgXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgcHJvY2Vzc0V4aXRTcHkgPSBqZXN0LnNweU9uKHByb2Nlc3MsICdleGl0JykubW9ja0ltcGxlbWVudGF0aW9uKCgoKSA9PiB7fSkgYXMgYW55KTtcbiAgICB9KTtcbiAgICBcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgY29uc29sZUVycm9yU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgICBwcm9jZXNzRXhpdFNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgaGFuZGxlIEdIUEVycm9yIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcignSW52YWxpZCBpbnB1dCcpO1xuICAgICAgaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZUVycm9yU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyb3I6IEludmFsaWQgaW5wdXQnKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzRXhpdFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoRXhpdENvZGUuVmFsaWRhdGlvbkVycm9yKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBHaXRIdWJBUElFcnJvciB3aXRoIHJlc3BvbnNlIGRhdGEgaW4gdmVyYm9zZSBtb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0geyBzdGF0dXM6IDQwMywgbWVzc2FnZTogJ1JhdGUgbGltaXQgZXhjZWVkZWQnIH07XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBHaXRIdWJBUElFcnJvcignQVBJIGVycm9yJywgcmVzcG9uc2VEYXRhKTtcbiAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB0cnVlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ0dpdEh1YiBBUEkgRXJyb3I6IEFQSSBlcnJvcicpKTtcbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlRGF0YSwgbnVsbCwgMikpKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzRXhpdFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoRXhpdENvZGUuR2l0SHViQVBJRXJyb3IpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgaGFuZGxlIEdpdEh1YkFQSUVycm9yIHdpdGhvdXQgcmVzcG9uc2UgZGF0YSBkZXRhaWxzIGluIG5vbi12ZXJib3NlIG1vZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSB7IHN0YXR1czogNDAzLCBtZXNzYWdlOiAnUmF0ZSBsaW1pdCBleGNlZWRlZCcgfTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEdpdEh1YkFQSUVycm9yKCdBUEkgZXJyb3InLCByZXNwb25zZURhdGEpO1xuICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIGZhbHNlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ0dpdEh1YiBBUEkgRXJyb3I6IEFQSSBlcnJvcicpKTtcbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Quc3RyaW5nQ29udGFpbmluZyhKU09OLnN0cmluZ2lmeShyZXNwb25zZURhdGEsIG51bGwsIDIpKSk7XG4gICAgICBleHBlY3QocHJvY2Vzc0V4aXRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEV4aXRDb2RlLkdpdEh1YkFQSUVycm9yKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBub24tR0hQRXJyb3Igd2l0aCBtZXNzYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1N0YW5kYXJkIGVycm9yJyk7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdFcnJvcjogU3RhbmRhcmQgZXJyb3InKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzRXhpdFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoRXhpdENvZGUuR2VuZXJhbEVycm9yKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBub24tRXJyb3Igb2JqZWN0cycsICgpID0+IHtcbiAgICAgIGhhbmRsZUVycm9yKCdTdHJpbmcgZXJyb3InKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Vycm9yOiBTdHJpbmcgZXJyb3InKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzRXhpdFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoRXhpdENvZGUuR2VuZXJhbEVycm9yKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHByaW50IHN0YWNrIHRyYWNlIGluIHZlcmJvc2UgbW9kZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdXaXRoIHN0YWNrJyk7XG4gICAgICBlcnJvci5zdGFjayA9ICdFcnJvcjogV2l0aCBzdGFja1xcbiAgICBhdCBmaWxlLmpzOjE6MSc7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvciwgdHJ1ZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdcXG5TdGFjayB0cmFjZTonKTtcbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVycm9yLnN0YWNrKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnd3JhcFdpdGhFcnJvckhhbmRsZXInLCAoKSA9PiB7XG4gICAgbGV0IGhhbmRsZUVycm9yTW9jazogamVzdC5TcHlJbnN0YW5jZTtcbiAgICBcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGhhbmRsZUVycm9yTW9jayA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gICAgICBqZXN0LnNweU9uKHByb2Nlc3MsICdleGl0JykubW9ja0ltcGxlbWVudGF0aW9uKCgoKSA9PiB7fSkgYXMgYW55KTtcbiAgICB9KTtcbiAgICBcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgaGFuZGxlRXJyb3JNb2NrLm1vY2tSZXN0b3JlKCk7XG4gICAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZ1bmN0aW9uIHJlc3VsdCBvbiBzdWNjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZm4gPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ3N1Y2Nlc3MnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWQgPSB3cmFwV2l0aEVycm9ySGFuZGxlcihmbik7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdyYXBwZWQoJ2FyZzEnLCAnYXJnMicpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCdzdWNjZXNzJyk7XG4gICAgICBleHBlY3QoZm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcmcxJywgJ2FyZzInKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGNhbGwgaGFuZGxlRXJyb3Igb24gZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmbiA9IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG4gICAgICBjb25zdCB3cmFwcGVkID0gd3JhcFdpdGhFcnJvckhhbmRsZXIoZm4pO1xuICAgICAgXG4gICAgICBhd2FpdCB3cmFwcGVkKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChoYW5kbGVFcnJvck1vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHBhc3MgdmVyYm9zZSBmbGFnIHRvIGhhbmRsZUVycm9yIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxIYW5kbGVFcnJvciA9IHJlcXVpcmUoJy4vaW5kZXgnKS5oYW5kbGVFcnJvcjtcbiAgICAgIGNvbnN0IG1vY2tIYW5kbGVFcnJvciA9IGplc3QuZm4oKTtcbiAgICAgIHJlcXVpcmUoJy4vaW5kZXgnKS5oYW5kbGVFcnJvciA9IG1vY2tIYW5kbGVFcnJvcjtcbiAgICAgIFxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ3Rlc3QgZXJyb3InKTtcbiAgICAgIGNvbnN0IGZuID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKGVycm9yKTtcbiAgICAgIGNvbnN0IHdyYXBwZWQgPSB3cmFwV2l0aEVycm9ySGFuZGxlcihmbiwgdHJ1ZSk7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHdyYXBwZWQoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHJlcXVpcmUoJy4vaW5kZXgnKS5oYW5kbGVFcnJvciA9IG9yaWdpbmFsSGFuZGxlRXJyb3I7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrSGFuZGxlRXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVycm9yLCB0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0V4aXQgQ29kZXMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgaGF2ZSBjb3JyZWN0IGV4aXQgY29kZSB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KEV4aXRDb2RlLlN1Y2Nlc3MpLnRvQmUoMCk7XG4gICAgZXhwZWN0KEV4aXRDb2RlLkdlbmVyYWxFcnJvcikudG9CZSgxKTtcbiAgICBleHBlY3QoRXhpdENvZGUuVmFsaWRhdGlvbkVycm9yKS50b0JlKDIpO1xuICAgIGV4cGVjdChFeGl0Q29kZS5OZXR3b3JrRXJyb3IpLnRvQmUoMyk7XG4gICAgZXhwZWN0KEV4aXRDb2RlLkF1dGhlbnRpY2F0aW9uRXJyb3IpLnRvQmUoNCk7XG4gICAgZXhwZWN0KEV4aXRDb2RlLk5vdEZvdW5kRXJyb3IpLnRvQmUoNSk7XG4gICAgZXhwZWN0KEV4aXRDb2RlLkdpdEh1YkFQSUVycm9yKS50b0JlKDYpO1xuICAgIGV4cGVjdChFeGl0Q29kZS5Db25maWd1cmF0aW9uRXJyb3IpLnRvQmUoNyk7XG4gIH0pO1xufSk7ICJdLCJ2ZXJzaW9uIjozfQ==