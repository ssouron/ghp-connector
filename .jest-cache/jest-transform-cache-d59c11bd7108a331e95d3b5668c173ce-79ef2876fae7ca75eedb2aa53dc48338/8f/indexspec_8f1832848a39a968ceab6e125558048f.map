{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/errors/index.spec.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/errors/index.spec.ts"],"sourcesContent":["/**\n * Unit tests for error handling module\n */\n\nimport { \n  ExitCode,\n  GHPError, \n  ValidationError,\n  NetworkError,\n  AuthenticationError,\n  NotFoundError,\n  GitHubAPIError,\n  ConfigurationError,\n  handleError,\n  wrapWithErrorHandler\n} from './index';\n\ndescribe('Error Types', () => {\n  describe('GHPError', () => {\n    it('should create a base error with default exit code', () => {\n      const error = new GHPError('Base error message');\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error.message).toBe('Base error message');\n      expect(error.name).toBe('GHPError');\n      expect(error.exitCode).toBe(ExitCode.GeneralError);\n    });\n\n    it('should create a base error with custom exit code', () => {\n      const error = new GHPError('Base error message', ExitCode.NotFoundError);\n      expect(error.exitCode).toBe(ExitCode.NotFoundError);\n    });\n  });\n\n  describe('ValidationError', () => {\n    it('should create a validation error with correct exit code', () => {\n      const error = new ValidationError('Invalid input');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(ValidationError);\n      expect(error.message).toBe('Invalid input');\n      expect(error.name).toBe('ValidationError');\n      expect(error.exitCode).toBe(ExitCode.ValidationError);\n    });\n  });\n\n  describe('NetworkError', () => {\n    it('should create a network error with correct exit code', () => {\n      const error = new NetworkError('Connection failed');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(NetworkError);\n      expect(error.message).toBe('Connection failed');\n      expect(error.name).toBe('NetworkError');\n      expect(error.exitCode).toBe(ExitCode.NetworkError);\n    });\n  });\n\n  describe('AuthenticationError', () => {\n    it('should create an authentication error with correct exit code', () => {\n      const error = new AuthenticationError('Invalid token');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(AuthenticationError);\n      expect(error.message).toBe('Invalid token');\n      expect(error.name).toBe('AuthenticationError');\n      expect(error.exitCode).toBe(ExitCode.AuthenticationError);\n    });\n  });\n\n  describe('NotFoundError', () => {\n    it('should create a not found error with correct exit code', () => {\n      const error = new NotFoundError('Resource not found');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(NotFoundError);\n      expect(error.message).toBe('Resource not found');\n      expect(error.name).toBe('NotFoundError');\n      expect(error.exitCode).toBe(ExitCode.NotFoundError);\n    });\n  });\n\n  describe('GitHubAPIError', () => {\n    it('should create a GitHub API error with correct exit code', () => {\n      const error = new GitHubAPIError('API rate limit exceeded');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(GitHubAPIError);\n      expect(error.message).toBe('API rate limit exceeded');\n      expect(error.name).toBe('GitHubAPIError');\n      expect(error.exitCode).toBe(ExitCode.GitHubAPIError);\n      expect(error.response).toBeUndefined();\n    });\n\n    it('should create a GitHub API error with response data', () => {\n      const responseData = { status: 403, message: 'Rate limit exceeded' };\n      const error = new GitHubAPIError('API rate limit exceeded', responseData);\n      expect(error.response).toBe(responseData);\n    });\n  });\n\n  describe('ConfigurationError', () => {\n    it('should create a configuration error with correct exit code', () => {\n      const error = new ConfigurationError('Invalid configuration');\n      expect(error).toBeInstanceOf(GHPError);\n      expect(error).toBeInstanceOf(ConfigurationError);\n      expect(error.message).toBe('Invalid configuration');\n      expect(error.name).toBe('ConfigurationError');\n      expect(error.exitCode).toBe(ExitCode.ConfigurationError);\n    });\n  });\n});\n\ndescribe('Error Handling Functions', () => {\n  describe('handleError', () => {\n    let consoleErrorSpy: jest.SpyInstance;\n    let processExitSpy: jest.SpyInstance;\n    \n    beforeEach(() => {\n      consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n      processExitSpy = jest.spyOn(process, 'exit').mockImplementation((() => {}) as any);\n    });\n    \n    afterEach(() => {\n      consoleErrorSpy.mockRestore();\n      processExitSpy.mockRestore();\n    });\n    \n    it('should handle GHPError correctly', () => {\n      const error = new ValidationError('Invalid input');\n      handleError(error);\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Invalid input');\n      expect(processExitSpy).toHaveBeenCalledWith(ExitCode.ValidationError);\n    });\n    \n    it('should handle GitHubAPIError with response data in verbose mode', () => {\n      const responseData = { status: 403, message: 'Rate limit exceeded' };\n      const error = new GitHubAPIError('API error', responseData);\n      handleError(error, true);\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));\n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));\n      expect(processExitSpy).toHaveBeenCalledWith(ExitCode.GitHubAPIError);\n    });\n    \n    it('should handle GitHubAPIError without response data details in non-verbose mode', () => {\n      const responseData = { status: 403, message: 'Rate limit exceeded' };\n      const error = new GitHubAPIError('API error', responseData);\n      handleError(error, false);\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));\n      expect(consoleErrorSpy).not.toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));\n      expect(processExitSpy).toHaveBeenCalledWith(ExitCode.GitHubAPIError);\n    });\n    \n    it('should handle non-GHPError with message', () => {\n      const error = new Error('Standard error');\n      handleError(error);\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Standard error');\n      expect(processExitSpy).toHaveBeenCalledWith(ExitCode.GeneralError);\n    });\n    \n    it('should handle non-Error objects', () => {\n      handleError('String error');\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error: String error');\n      expect(processExitSpy).toHaveBeenCalledWith(ExitCode.GeneralError);\n    });\n    \n    it('should print stack trace in verbose mode', () => {\n      const error = new Error('With stack');\n      error.stack = 'Error: With stack\\n    at file.js:1:1';\n      handleError(error, true);\n      \n      expect(consoleErrorSpy).toHaveBeenCalledWith('\\nStack trace:');\n      expect(consoleErrorSpy).toHaveBeenCalledWith(error.stack);\n    });\n  });\n  \n  describe('wrapWithErrorHandler', () => {\n    let handleErrorMock: jest.SpyInstance;\n    \n    beforeEach(() => {\n      handleErrorMock = jest.spyOn(console, 'error').mockImplementation();\n      jest.spyOn(process, 'exit').mockImplementation((() => {}) as any);\n    });\n    \n    afterEach(() => {\n      handleErrorMock.mockRestore();\n      jest.restoreAllMocks();\n    });\n    \n    it('should return function result on success', async () => {\n      const fn = jest.fn().mockResolvedValue('success');\n      const wrapped = wrapWithErrorHandler(fn);\n      \n      const result = await wrapped('arg1', 'arg2');\n      \n      expect(result).toBe('success');\n      expect(fn).toHaveBeenCalledWith('arg1', 'arg2');\n    });\n    \n    it('should call handleError on error', async () => {\n      const fn = jest.fn().mockRejectedValue(new Error('Test error'));\n      const wrapped = wrapWithErrorHandler(fn);\n      \n      await wrapped();\n      \n      expect(handleErrorMock).toHaveBeenCalled();\n    });\n    \n    it('should pass verbose flag to handleError function', async () => {\n      const originalHandleError = require('./index').handleError;\n      const mockHandleError = jest.fn();\n      require('./index').handleError = mockHandleError;\n      \n      const error = new Error('test error');\n      const fn = jest.fn().mockRejectedValue(error);\n      const wrapped = wrapWithErrorHandler(fn, true);\n      \n      try {\n        await wrapped();\n      } finally {\n        require('./index').handleError = originalHandleError;\n      }\n      \n      expect(mockHandleError).toHaveBeenCalledWith(error, true);\n    });\n  });\n});\n\ndescribe('Exit Codes', () => {\n  it('should have correct exit code values', () => {\n    expect(ExitCode.Success).toBe(0);\n    expect(ExitCode.GeneralError).toBe(1);\n    expect(ExitCode.ValidationError).toBe(2);\n    expect(ExitCode.NetworkError).toBe(3);\n    expect(ExitCode.AuthenticationError).toBe(4);\n    expect(ExitCode.NotFoundError).toBe(5);\n    expect(ExitCode.GitHubAPIError).toBe(6);\n    expect(ExitCode.ConfigurationError).toBe(7);\n  });\n}); "],"version":3}