8aabd033c1976f0a66c762b342d2c347
"use strict";
/**
 * GitHub API Client
 * Wrapper around Octokit to provide a simplified interface
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubClient = void 0;
const octokit_1 = require("octokit");
/**
 * GitHub API client wrapper
 */
class GitHubClient {
    /**
     * Create a new GitHub client
     */
    constructor(options = {}) {
        // Initialize Octokit
        this.octokit = new octokit_1.Octokit({
            auth: options.token,
            baseUrl: options.baseUrl,
        });
        this.owner = options.owner || null;
        this.repo = options.repo || null;
    }
    /**
     * Initialize GitHub client from config
     */
    static fromConfig(config) {
        return new GitHubClient({
            token: config.github.token,
            owner: config.github.owner,
            repo: config.github.repo,
        });
    }
    /**
     * Get repository information
     */
    async getRepository(owner, repo) {
        const repoOwner = owner || this.owner;
        const repoName = repo || this.repo;
        if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name are required. Provide them as parameters or set them in the configuration.');
        }
        const { data } = await this.octokit.rest.repos.get({
            owner: repoOwner,
            repo: repoName,
        });
        return data;
    }
    /**
     * List issues in a repository
     */
    async listIssues(options = {}) {
        const repoOwner = options.owner || this.owner;
        const repoName = options.repo || this.repo;
        if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name are required. Provide them as parameters or set them in the configuration.');
        }
        // Remove owner and repo from options and keep the rest
        const { owner, repo, ...restOptions } = options;
        const { data } = await this.octokit.rest.issues.listForRepo({
            owner: repoOwner,
            repo: repoName,
            ...restOptions,
        });
        return data;
    }
    /**
     * Get a single issue
     */
    async getIssue(issueNumber, options = {}) {
        const repoOwner = options.owner || this.owner;
        const repoName = options.repo || this.repo;
        if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name are required. Provide them as parameters or set them in the configuration.');
        }
        const { data } = await this.octokit.rest.issues.get({
            owner: repoOwner,
            repo: repoName,
            issue_number: issueNumber,
        });
        return data;
    }
    /**
     * Create a new issue
     */
    async createIssue(title, body, options = {}) {
        const repoOwner = options.owner || this.owner;
        const repoName = options.repo || this.repo;
        if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name are required. Provide them as parameters or set them in the configuration.');
        }
        // Remove owner and repo from options and keep the rest
        const { owner, repo, ...restOptions } = options;
        const { data } = await this.octokit.rest.issues.create({
            owner: repoOwner,
            repo: repoName,
            title,
            body,
            ...restOptions,
        });
        return data;
    }
    /**
     * Update an existing issue
     */
    async updateIssue(issueNumber, options = {}) {
        const repoOwner = options.owner || this.owner;
        const repoName = options.repo || this.repo;
        if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name are required. Provide them as parameters or set them in the configuration.');
        }
        // Remove owner and repo from options and keep the rest
        const { owner, repo, ...restOptions } = options;
        const { data } = await this.octokit.rest.issues.update({
            owner: repoOwner,
            repo: repoName,
            issue_number: issueNumber,
            ...restOptions,
        });
        return data;
    }
    /**
     * Execute a GraphQL query against the GitHub API
     */
    async graphql(query, variables = {}) {
        return this.octokit.graphql(query, variables);
    }
}
exports.GitHubClient = GitHubClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3N0ZXBoYW5lc291cm9uL2Rldi9iZWRkeS1ieWUtc3Rvcmllcy9naHAtY29ubmVjdG9yL3NyYy9saWIvZ2l0aHViL2NsaWVudC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxxQ0FBa0M7QUF5QmxDOztHQUVHO0FBQ0gsTUFBYSxZQUFZO0lBS3ZCOztPQUVHO0lBQ0gsWUFBWSxVQUErQixFQUFFO1FBQzNDLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQztZQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDbkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWlCO1FBQ2pDLE9BQU8sSUFBSSxZQUFZLENBQUM7WUFDdEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSztZQUMxQixLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQzFCLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUk7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFjLEVBQUUsSUFBYTtRQUMvQyxNQUFNLFNBQVMsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztRQUVuQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzR0FBc0csQ0FBQyxDQUFDO1FBQzFILENBQUM7UUFFRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ2pELEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQWUsRUFBRTtRQUNoQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHNHQUFzRyxDQUFDLENBQUM7UUFDMUgsQ0FBQztRQUVELHVEQUF1RDtRQUN2RCxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQzFELEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxRQUFRO1lBQ2QsR0FBRyxXQUFXO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQW1CLEVBQUUsVUFBZSxFQUFFO1FBQ25ELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFM0MsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0dBQXNHLENBQUMsQ0FBQztRQUMxSCxDQUFDO1FBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNsRCxLQUFLLEVBQUUsU0FBUztZQUNoQixJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxXQUFXO1NBQzFCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFhLEVBQUUsSUFBYSxFQUFFLFVBQWUsRUFBRTtRQUMvRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHNHQUFzRyxDQUFDLENBQUM7UUFDMUgsQ0FBQztRQUVELHVEQUF1RDtRQUN2RCxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3JELEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSztZQUNMLElBQUk7WUFDSixHQUFHLFdBQVc7U0FDZixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBbUIsRUFBRSxVQUFlLEVBQUU7UUFDdEQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztRQUUzQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzR0FBc0csQ0FBQyxDQUFDO1FBQzFILENBQUM7UUFFRCx1REFBdUQ7UUFDdkQsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFaEQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNyRCxLQUFLLEVBQUUsU0FBUztZQUNoQixJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxXQUFXO1lBQ3pCLEdBQUcsV0FBVztTQUNmLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFhLEVBQUUsWUFBaUIsRUFBRTtRQUM5QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0Y7QUFuSkQsb0NBbUpDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVwaGFuZXNvdXJvbi9kZXYvYmVkZHktYnllLXN0b3JpZXMvZ2hwLWNvbm5lY3Rvci9zcmMvbGliL2dpdGh1Yi9jbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHaXRIdWIgQVBJIENsaWVudFxuICogV3JhcHBlciBhcm91bmQgT2N0b2tpdCB0byBwcm92aWRlIGEgc2ltcGxpZmllZCBpbnRlcmZhY2VcbiAqL1xuXG5pbXBvcnQgeyBPY3Rva2l0IH0gZnJvbSAnb2N0b2tpdCc7XG5pbXBvcnQgeyBHSFBDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuXG5pbnRlcmZhY2UgR2l0SHViQ2xpZW50T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBHaXRIdWIgQVBJIHRva2VuXG4gICAqL1xuICB0b2tlbj86IHN0cmluZztcbiAgXG4gIC8qKlxuICAgKiBSZXBvc2l0b3J5IG93bmVyXG4gICAqL1xuICBvd25lcj86IHN0cmluZztcbiAgXG4gIC8qKlxuICAgKiBSZXBvc2l0b3J5IG5hbWVcbiAgICovXG4gIHJlcG8/OiBzdHJpbmc7XG4gIFxuICAvKipcbiAgICogQmFzZSBVUkwgZm9yIEdpdEh1YiBBUEkgKGZvciBHaXRIdWIgRW50ZXJwcmlzZSlcbiAgICovXG4gIGJhc2VVcmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogR2l0SHViIEFQSSBjbGllbnQgd3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgR2l0SHViQ2xpZW50IHtcbiAgcHJpdmF0ZSBvY3Rva2l0OiBPY3Rva2l0O1xuICBwcml2YXRlIG93bmVyOiBzdHJpbmcgfCBudWxsO1xuICBwcml2YXRlIHJlcG86IHN0cmluZyB8IG51bGw7XG4gIFxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEdpdEh1YiBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEdpdEh1YkNsaWVudE9wdGlvbnMgPSB7fSkge1xuICAgIC8vIEluaXRpYWxpemUgT2N0b2tpdFxuICAgIHRoaXMub2N0b2tpdCA9IG5ldyBPY3Rva2l0KHtcbiAgICAgIGF1dGg6IG9wdGlvbnMudG9rZW4sXG4gICAgICBiYXNlVXJsOiBvcHRpb25zLmJhc2VVcmwsXG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy5vd25lciA9IG9wdGlvbnMub3duZXIgfHwgbnVsbDtcbiAgICB0aGlzLnJlcG8gPSBvcHRpb25zLnJlcG8gfHwgbnVsbDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgR2l0SHViIGNsaWVudCBmcm9tIGNvbmZpZ1xuICAgKi9cbiAgc3RhdGljIGZyb21Db25maWcoY29uZmlnOiBHSFBDb25maWcpOiBHaXRIdWJDbGllbnQge1xuICAgIHJldHVybiBuZXcgR2l0SHViQ2xpZW50KHtcbiAgICAgIHRva2VuOiBjb25maWcuZ2l0aHViLnRva2VuLFxuICAgICAgb3duZXI6IGNvbmZpZy5naXRodWIub3duZXIsXG4gICAgICByZXBvOiBjb25maWcuZ2l0aHViLnJlcG8sXG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgcmVwb3NpdG9yeSBpbmZvcm1hdGlvblxuICAgKi9cbiAgYXN5bmMgZ2V0UmVwb3NpdG9yeShvd25lcj86IHN0cmluZywgcmVwbz86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmVwb093bmVyID0gb3duZXIgfHwgdGhpcy5vd25lcjtcbiAgICBjb25zdCByZXBvTmFtZSA9IHJlcG8gfHwgdGhpcy5yZXBvO1xuICAgIFxuICAgIGlmICghcmVwb093bmVyIHx8ICFyZXBvTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBvc2l0b3J5IG93bmVyIGFuZCBuYW1lIGFyZSByZXF1aXJlZC4gUHJvdmlkZSB0aGVtIGFzIHBhcmFtZXRlcnMgb3Igc2V0IHRoZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5vY3Rva2l0LnJlc3QucmVwb3MuZ2V0KHtcbiAgICAgIG93bmVyOiByZXBvT3duZXIsXG4gICAgICByZXBvOiByZXBvTmFtZSxcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIExpc3QgaXNzdWVzIGluIGEgcmVwb3NpdG9yeVxuICAgKi9cbiAgYXN5bmMgbGlzdElzc3VlcyhvcHRpb25zOiBhbnkgPSB7fSk6IFByb21pc2U8YW55W10+IHtcbiAgICBjb25zdCByZXBvT3duZXIgPSBvcHRpb25zLm93bmVyIHx8IHRoaXMub3duZXI7XG4gICAgY29uc3QgcmVwb05hbWUgPSBvcHRpb25zLnJlcG8gfHwgdGhpcy5yZXBvO1xuICAgIFxuICAgIGlmICghcmVwb093bmVyIHx8ICFyZXBvTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBvc2l0b3J5IG93bmVyIGFuZCBuYW1lIGFyZSByZXF1aXJlZC4gUHJvdmlkZSB0aGVtIGFzIHBhcmFtZXRlcnMgb3Igc2V0IHRoZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBvd25lciBhbmQgcmVwbyBmcm9tIG9wdGlvbnMgYW5kIGtlZXAgdGhlIHJlc3RcbiAgICBjb25zdCB7IG93bmVyLCByZXBvLCAuLi5yZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMub2N0b2tpdC5yZXN0Lmlzc3Vlcy5saXN0Rm9yUmVwbyh7XG4gICAgICBvd25lcjogcmVwb093bmVyLFxuICAgICAgcmVwbzogcmVwb05hbWUsXG4gICAgICAuLi5yZXN0T3B0aW9ucyxcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZSBpc3N1ZVxuICAgKi9cbiAgYXN5bmMgZ2V0SXNzdWUoaXNzdWVOdW1iZXI6IG51bWJlciwgb3B0aW9uczogYW55ID0ge30pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJlcG9Pd25lciA9IG9wdGlvbnMub3duZXIgfHwgdGhpcy5vd25lcjtcbiAgICBjb25zdCByZXBvTmFtZSA9IG9wdGlvbnMucmVwbyB8fCB0aGlzLnJlcG87XG4gICAgXG4gICAgaWYgKCFyZXBvT3duZXIgfHwgIXJlcG9OYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcG9zaXRvcnkgb3duZXIgYW5kIG5hbWUgYXJlIHJlcXVpcmVkLiBQcm92aWRlIHRoZW0gYXMgcGFyYW1ldGVycyBvciBzZXQgdGhlbSBpbiB0aGUgY29uZmlndXJhdGlvbi4nKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLm9jdG9raXQucmVzdC5pc3N1ZXMuZ2V0KHtcbiAgICAgIG93bmVyOiByZXBvT3duZXIsXG4gICAgICByZXBvOiByZXBvTmFtZSxcbiAgICAgIGlzc3VlX251bWJlcjogaXNzdWVOdW1iZXIsXG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaXNzdWVcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUlzc3VlKHRpdGxlOiBzdHJpbmcsIGJvZHk/OiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCByZXBvT3duZXIgPSBvcHRpb25zLm93bmVyIHx8IHRoaXMub3duZXI7XG4gICAgY29uc3QgcmVwb05hbWUgPSBvcHRpb25zLnJlcG8gfHwgdGhpcy5yZXBvO1xuICAgIFxuICAgIGlmICghcmVwb093bmVyIHx8ICFyZXBvTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBvc2l0b3J5IG93bmVyIGFuZCBuYW1lIGFyZSByZXF1aXJlZC4gUHJvdmlkZSB0aGVtIGFzIHBhcmFtZXRlcnMgb3Igc2V0IHRoZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBvd25lciBhbmQgcmVwbyBmcm9tIG9wdGlvbnMgYW5kIGtlZXAgdGhlIHJlc3RcbiAgICBjb25zdCB7IG93bmVyLCByZXBvLCAuLi5yZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMub2N0b2tpdC5yZXN0Lmlzc3Vlcy5jcmVhdGUoe1xuICAgICAgb3duZXI6IHJlcG9Pd25lcixcbiAgICAgIHJlcG86IHJlcG9OYW1lLFxuICAgICAgdGl0bGUsXG4gICAgICBib2R5LFxuICAgICAgLi4ucmVzdE9wdGlvbnMsXG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgaXNzdWVcbiAgICovXG4gIGFzeW5jIHVwZGF0ZUlzc3VlKGlzc3VlTnVtYmVyOiBudW1iZXIsIG9wdGlvbnM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCByZXBvT3duZXIgPSBvcHRpb25zLm93bmVyIHx8IHRoaXMub3duZXI7XG4gICAgY29uc3QgcmVwb05hbWUgPSBvcHRpb25zLnJlcG8gfHwgdGhpcy5yZXBvO1xuICAgIFxuICAgIGlmICghcmVwb093bmVyIHx8ICFyZXBvTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBvc2l0b3J5IG93bmVyIGFuZCBuYW1lIGFyZSByZXF1aXJlZC4gUHJvdmlkZSB0aGVtIGFzIHBhcmFtZXRlcnMgb3Igc2V0IHRoZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBvd25lciBhbmQgcmVwbyBmcm9tIG9wdGlvbnMgYW5kIGtlZXAgdGhlIHJlc3RcbiAgICBjb25zdCB7IG93bmVyLCByZXBvLCAuLi5yZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMub2N0b2tpdC5yZXN0Lmlzc3Vlcy51cGRhdGUoe1xuICAgICAgb3duZXI6IHJlcG9Pd25lcixcbiAgICAgIHJlcG86IHJlcG9OYW1lLFxuICAgICAgaXNzdWVfbnVtYmVyOiBpc3N1ZU51bWJlcixcbiAgICAgIC4uLnJlc3RPcHRpb25zLFxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIFxuICAvKipcbiAgICogRXhlY3V0ZSBhIEdyYXBoUUwgcXVlcnkgYWdhaW5zdCB0aGUgR2l0SHViIEFQSVxuICAgKi9cbiAgYXN5bmMgZ3JhcGhxbChxdWVyeTogc3RyaW5nLCB2YXJpYWJsZXM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5vY3Rva2l0LmdyYXBocWwocXVlcnksIHZhcmlhYmxlcyk7XG4gIH1cbn0gIl0sInZlcnNpb24iOjN9