318956a4337940e14e434a11aa7d6e69
"use strict";
/**
 * Mock GitHub API
 * Provides mock implementation of GitHub API responses for testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockIssue = createMockIssue;
exports.createMockIssueList = createMockIssueList;
/**
 * Create a mock GitHub issue
 * @param id Issue ID
 * @param title Issue title
 * @param options Additional options
 * @returns A mock GitHub issue object
 */
function createMockIssue(id, title, options = {}) {
    const now = new Date().toISOString();
    return {
        id,
        number: id,
        title,
        body: options.body || 'Test issue body',
        state: options.state || 'open',
        html_url: `https://github.com/test-owner/test-repo/issues/${id}`,
        labels: options.labels || [],
        assignees: options.assignees || [],
        created_at: options.created_at || now,
        updated_at: options.updated_at || now,
        closed_at: options.state === 'closed' ? (options.closed_at || now) : null,
        user: {
            login: options.creator || 'test-user',
            id: 1,
            avatar_url: 'https://github.com/test-user.png',
            html_url: 'https://github.com/test-user'
        }
    };
}
/**
 * Create a list of mock issues
 * @param count Number of issues to create
 * @param options Additional options
 * @returns An array of mock GitHub issues
 */
function createMockIssueList(count, options = {}) {
    return Array.from({ length: count }, (_, i) => createMockIssue(i + 1, `Test issue ${i + 1}`, options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3N0ZXBoYW5lc291cm9uL2Rldi9iZWRkeS1ieWUtc3Rvcmllcy9naHAtY29ubmVjdG9yL3NyYy9saWIvdGVzdC1oZWxwZXJzL21vY2stZ2l0aHViLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBU0gsMENBc0JDO0FBUUQsa0RBSUM7QUF6Q0Q7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLEVBQVUsRUFBRSxLQUFhLEVBQUUsVUFBcUMsRUFBRTtJQUNoRyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXJDLE9BQU87UUFDTCxFQUFFO1FBQ0YsTUFBTSxFQUFFLEVBQUU7UUFDVixLQUFLO1FBQ0wsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksaUJBQWlCO1FBQ3ZDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxJQUFJLE1BQU07UUFDOUIsUUFBUSxFQUFFLGtEQUFrRCxFQUFFLEVBQUU7UUFDaEUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRTtRQUM1QixTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFO1FBQ2xDLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVSxJQUFJLEdBQUc7UUFDckMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksR0FBRztRQUNyQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN6RSxJQUFJLEVBQUU7WUFDSixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxXQUFXO1lBQ3JDLEVBQUUsRUFBRSxDQUFDO1lBQ0wsVUFBVSxFQUFFLGtDQUFrQztZQUM5QyxRQUFRLEVBQUUsOEJBQThCO1NBQ3pDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLG1CQUFtQixDQUFDLEtBQWEsRUFBRSxVQUFxQyxFQUFFO0lBQ3hGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUM1QyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZXBoYW5lc291cm9uL2Rldi9iZWRkeS1ieWUtc3Rvcmllcy9naHAtY29ubmVjdG9yL3NyYy9saWIvdGVzdC1oZWxwZXJzL21vY2stZ2l0aHViLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9jayBHaXRIdWIgQVBJXG4gKiBQcm92aWRlcyBtb2NrIGltcGxlbWVudGF0aW9uIG9mIEdpdEh1YiBBUEkgcmVzcG9uc2VzIGZvciB0ZXN0aW5nXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2NrIEdpdEh1YiBpc3N1ZVxuICogQHBhcmFtIGlkIElzc3VlIElEXG4gKiBAcGFyYW0gdGl0bGUgSXNzdWUgdGl0bGVcbiAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHJldHVybnMgQSBtb2NrIEdpdEh1YiBpc3N1ZSBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tJc3N1ZShpZDogbnVtYmVyLCB0aXRsZTogc3RyaW5nLCBvcHRpb25zOiBQYXJ0aWFsPE1vY2tJc3N1ZU9wdGlvbnM+ID0ge30pIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICBcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBudW1iZXI6IGlkLFxuICAgIHRpdGxlLFxuICAgIGJvZHk6IG9wdGlvbnMuYm9keSB8fCAnVGVzdCBpc3N1ZSBib2R5JyxcbiAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSB8fCAnb3BlbicsXG4gICAgaHRtbF91cmw6IGBodHRwczovL2dpdGh1Yi5jb20vdGVzdC1vd25lci90ZXN0LXJlcG8vaXNzdWVzLyR7aWR9YCxcbiAgICBsYWJlbHM6IG9wdGlvbnMubGFiZWxzIHx8IFtdLFxuICAgIGFzc2lnbmVlczogb3B0aW9ucy5hc3NpZ25lZXMgfHwgW10sXG4gICAgY3JlYXRlZF9hdDogb3B0aW9ucy5jcmVhdGVkX2F0IHx8IG5vdyxcbiAgICB1cGRhdGVkX2F0OiBvcHRpb25zLnVwZGF0ZWRfYXQgfHwgbm93LFxuICAgIGNsb3NlZF9hdDogb3B0aW9ucy5zdGF0ZSA9PT0gJ2Nsb3NlZCcgPyAob3B0aW9ucy5jbG9zZWRfYXQgfHwgbm93KSA6IG51bGwsXG4gICAgdXNlcjoge1xuICAgICAgbG9naW46IG9wdGlvbnMuY3JlYXRvciB8fCAndGVzdC11c2VyJyxcbiAgICAgIGlkOiAxLFxuICAgICAgYXZhdGFyX3VybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS90ZXN0LXVzZXIucG5nJyxcbiAgICAgIGh0bWxfdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL3Rlc3QtdXNlcidcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbGlzdCBvZiBtb2NrIGlzc3Vlc1xuICogQHBhcmFtIGNvdW50IE51bWJlciBvZiBpc3N1ZXMgdG8gY3JlYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG1vY2sgR2l0SHViIGlzc3Vlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja0lzc3VlTGlzdChjb3VudDogbnVtYmVyLCBvcHRpb25zOiBQYXJ0aWFsPE1vY2tJc3N1ZU9wdGlvbnM+ID0ge30pIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGNvdW50IH0sIChfLCBpKSA9PiBcbiAgICBjcmVhdGVNb2NrSXNzdWUoaSArIDEsIGBUZXN0IGlzc3VlICR7aSArIDF9YCwgb3B0aW9ucylcbiAgKTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBtb2NrIGlzc3Vlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tJc3N1ZU9wdGlvbnMge1xuICBib2R5OiBzdHJpbmc7XG4gIHN0YXRlOiAnb3BlbicgfCAnY2xvc2VkJztcbiAgbGFiZWxzOiBBcnJheTx7IGlkOiBudW1iZXIsIG5hbWU6IHN0cmluZywgY29sb3I6IHN0cmluZyB9PjtcbiAgYXNzaWduZWVzOiBBcnJheTx7IGxvZ2luOiBzdHJpbmcsIGlkOiBudW1iZXIgfT47XG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcbiAgdXBkYXRlZF9hdDogc3RyaW5nO1xuICBjbG9zZWRfYXQ6IHN0cmluZyB8IG51bGw7XG4gIGNyZWF0b3I6IHN0cmluZztcbn0gIl0sInZlcnNpb24iOjN9