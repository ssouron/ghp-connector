{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/__tests__/typescript-features.test.ts","mappings":";AAAA;;GAEG;AAgBH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,IAAI,GAAkB;YAC1B,EAAE,EAAE,CAAC;YACL,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,IAAI,GAAa;YACrB,KAAK,EAAE,OAAO;YACd,MAAM,EAAE;gBACN,IAAI,EAAE,EAAE;aACT;SACF,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,SAAS,QAAQ,CAAI,GAAM;YACzB,OAAO,GAAG,CAAC;QACb,CAAC;QAED,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEnC,MAAM,CAAC,OAAO,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/__tests__/typescript-features.test.ts"],"sourcesContent":["/**\n * Test pour vérifier la prise en charge des fonctionnalités TypeScript avancées\n */\n\n// Tester les types\ninterface TestInterface {\n  id: number;\n  name: string;\n  optional?: boolean;\n}\n\ntype TestType = {\n  value: string;\n  nested: {\n    prop: number;\n  };\n};\n\ndescribe('TypeScript Features', () => {\n  it('devrait prendre en charge les interfaces TypeScript', () => {\n    const data: TestInterface = {\n      id: 1,\n      name: 'test'\n    };\n    \n    expect(data.id).toBe(1);\n    expect(data.name).toBe('test');\n    expect(data.optional).toBeUndefined();\n  });\n\n  it('devrait prendre en charge les types complexes', () => {\n    const data: TestType = {\n      value: 'hello',\n      nested: {\n        prop: 42\n      }\n    };\n    \n    expect(data.value).toBe('hello');\n    expect(data.nested.prop).toBe(42);\n  });\n\n  it('devrait prendre en charge les fonctions génériques', () => {\n    function identity<T>(arg: T): T {\n      return arg;\n    }\n    \n    const stringResult = identity('hello');\n    const numberResult = identity(123);\n    \n    expect(typeof stringResult).toBe('string');\n    expect(typeof numberResult).toBe('number');\n  });\n}); "],"version":3}