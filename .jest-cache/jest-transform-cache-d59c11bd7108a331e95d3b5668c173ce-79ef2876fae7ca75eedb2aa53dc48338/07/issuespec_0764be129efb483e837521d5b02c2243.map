{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/commands/issue.spec.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/commands/issue.spec.ts"],"sourcesContent":["/**\n * Tests for issue commands\n */\n\nimport { Command } from 'commander';\nimport { createMockIssueList } from '../lib/test-helpers/mock-github';\nimport { registerIssueCommands } from './issue';\n\n// Mock dependencies\njest.mock('../lib', () => {\n  const originalLib = jest.requireActual('../lib');\n  return {\n    ...originalLib,\n    GitHubClient: {\n      fromConfig: jest.fn().mockReturnValue({\n        listIssues: jest.fn().mockResolvedValue(createMockIssueList(3)),\n        getIssue: jest.fn().mockImplementation((id) => \n          Promise.resolve(createMockIssueList(1)[0])),\n        createIssue: jest.fn().mockImplementation((title, body, options) => \n          Promise.resolve(createMockIssueList(1)[0])),\n        updateIssue: jest.fn().mockImplementation((id, options) => \n          Promise.resolve(createMockIssueList(1)[0])),\n      })\n    },\n    loadConfig: jest.fn().mockReturnValue({\n      github: {\n        owner: 'test-owner',\n        repo: 'test-repo'\n      },\n      defaults: {\n        issues: {\n          state: 'open'\n        }\n      }\n    }),\n    formatOutput: jest.fn().mockImplementation((data) => JSON.stringify(data)),\n    wrapWithErrorHandler: jest.fn().mockImplementation((fn) => fn),\n    cmdArgsToConfig: jest.fn().mockReturnValue({})\n  };\n});\n\n// Spy on console.log\nconst consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n\ndescribe('Issue Commands', () => {\n  let program: Command;\n  \n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Create a new Command instance\n    program = new Command();\n    registerIssueCommands(program);\n  });\n  \n  afterAll(() => {\n    // Restore console.log\n    consoleLogSpy.mockRestore();\n  });\n  \n  describe('issue list', () => {\n    it('devrait enregistrer la commande list', () => {\n      const listCommand = program.commands[0].commands.find(cmd => cmd.name() === 'list');\n      expect(listCommand).toBeDefined();\n      expect(listCommand?.description()).toBe('List issues in a repository');\n    });\n    \n    it('devrait contenir les options appropriÃ©es', () => {\n      const listCommand = program.commands[0].commands.find(cmd => cmd.name() === 'list');\n      const options = listCommand?.options.map(opt => opt.flags);\n      \n      expect(options).toContain('-s, --state <state>');\n      expect(options).toContain('-l, --limit <limit>');\n      expect(options).toContain('-a, --assignee <assignee>');\n      expect(options).toContain('-L, --label <labels>');\n    });\n  });\n  \n  describe('issue get', () => {\n    it('devrait enregistrer la commande get', () => {\n      const getCommand = program.commands[0].commands.find(cmd => cmd.name() === 'get');\n      expect(getCommand).toBeDefined();\n      expect(getCommand?.description()).toBe('Get details of a specific issue');\n    });\n  });\n  \n  describe('issue create', () => {\n    it('devrait enregistrer la commande create', () => {\n      const createCommand = program.commands[0].commands.find(cmd => cmd.name() === 'create');\n      expect(createCommand).toBeDefined();\n      expect(createCommand?.description()).toBe('Create a new issue');\n    });\n    \n    it('devrait exiger un titre', () => {\n      const createCommand = program.commands[0].commands.find(cmd => cmd.name() === 'create');\n      const titleOption = createCommand?.options.find(opt => opt.flags.includes('--title'));\n      \n      expect(titleOption).toBeDefined();\n      expect(titleOption?.required).toBe(true);\n    });\n  });\n}); "],"version":3}