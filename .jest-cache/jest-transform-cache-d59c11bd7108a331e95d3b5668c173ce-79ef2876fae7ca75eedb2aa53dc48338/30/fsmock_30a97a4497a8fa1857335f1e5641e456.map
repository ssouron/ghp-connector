{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/fs-mock.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/fs-mock.ts"],"sourcesContent":["/**\n * Mocks pour le système de fichiers (fs)\n */\n\nimport * as fs from 'fs';\n\n/**\n * Interface pour le système de fichiers virtuel\n */\nexport interface VirtualFileSystem {\n  [path: string]: string | Buffer;\n}\n\n// Type simplifié pour les mocks de fs\ntype MockedFs = {\n  existsSync: jest.Mock;\n  readFileSync: jest.Mock;\n  writeFileSync: jest.Mock;\n  mkdirSync: jest.Mock;\n  rmSync: jest.Mock;\n};\n\n/**\n * Crée un mock pour le module fs\n */\nexport function mockFs(): { fs: MockedFs; restore: () => void } {\n  // Créer un objet qui contient les fonctions mockées\n  const mockFsModule: MockedFs = {\n    existsSync: jest.fn().mockImplementation(() => false),\n    readFileSync: jest.fn().mockImplementation(() => Buffer.from('')),\n    writeFileSync: jest.fn().mockImplementation(() => undefined),\n    mkdirSync: jest.fn().mockImplementation(() => undefined),\n    rmSync: jest.fn().mockImplementation(() => undefined)\n  };\n\n  const restore = () => {\n    // Rien à faire\n  };\n\n  return { fs: mockFsModule, restore };\n}\n\n/**\n * Crée un système de fichiers virtuel pour les tests\n */\nexport function mockVirtualFs(initialFiles: VirtualFileSystem = {}): { \n  fs: MockedFs; \n  restore: () => void; \n  getVirtualFs: () => VirtualFileSystem \n} {\n  const virtualFs: VirtualFileSystem = { ...initialFiles };\n  \n  // Créer un objet qui contient les fonctions mockées pour le système de fichiers virtuel\n  const mockFsModule: MockedFs = {\n    existsSync: jest.fn().mockImplementation((path) => {\n      const pathStr = path.toString();\n      return pathStr in virtualFs;\n    }),\n    \n    readFileSync: jest.fn().mockImplementation((path, options) => {\n      const pathStr = path.toString();\n      if (!(pathStr in virtualFs)) {\n        const error = new Error(`ENOENT: no such file or directory, open '${pathStr}'`) as NodeJS.ErrnoException;\n        error.code = 'ENOENT';\n        throw error;\n      }\n\n      const content = virtualFs[pathStr];\n      const encoding = typeof options === 'string' ? options : options?.encoding;\n      \n      if (typeof content === 'string' && encoding === 'utf8') {\n        return content;\n      }\n      \n      return Buffer.isBuffer(content) ? content : Buffer.from(String(content));\n    }),\n    \n    writeFileSync: jest.fn().mockImplementation((path, data) => {\n      const pathStr = path.toString();\n      // Conversion safe pour s'assurer que data est stockée correctement\n      if (Buffer.isBuffer(data)) {\n        virtualFs[pathStr] = data;\n      } else if (typeof data === 'string') {\n        virtualFs[pathStr] = data;\n      } else {\n        // Pour d'autres types ArrayBufferView\n        try {\n          virtualFs[pathStr] = Buffer.from(data as any);  \n        } catch (e) {\n          // Fallback en cas d'erreur\n          virtualFs[pathStr] = data.toString();\n        }\n      }\n    }),\n    \n    mkdirSync: jest.fn().mockImplementation((path) => {\n      const pathStr = path.toString();\n      virtualFs[pathStr] = '';\n      return pathStr;\n    }),\n    \n    rmSync: jest.fn().mockImplementation((path) => {\n      const pathStr = path.toString();\n      if (pathStr in virtualFs) {\n        delete virtualFs[pathStr];\n      }\n    })\n  };\n\n  const restore = () => {\n    // Rien à faire\n  };\n\n  // Fonction pour accéder au système de fichiers virtuel\n  const getVirtualFs = () => virtualFs;\n\n  return { fs: mockFsModule, restore, getVirtualFs };\n} "],"version":3}