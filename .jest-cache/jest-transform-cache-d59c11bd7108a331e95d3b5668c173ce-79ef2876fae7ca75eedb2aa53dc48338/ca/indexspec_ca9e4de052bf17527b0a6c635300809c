b6f5138e5e74f4f81125a83fc210f75d
"use strict";
/**
 * Unit tests for error handling module
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
describe('Error Types', () => {
    describe('GHPError', () => {
        it('should create a base error with default exit code', () => {
            const error = new index_1.GHPError('Base error message');
            expect(error).toBeInstanceOf(Error);
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error.message).toBe('Base error message');
            expect(error.name).toBe('GHPError');
            expect(error.exitCode).toBe(index_1.ExitCode.GeneralError);
        });
        it('should create a base error with custom exit code', () => {
            const error = new index_1.GHPError('Base error message', index_1.ExitCode.NotFoundError);
            expect(error.exitCode).toBe(index_1.ExitCode.NotFoundError);
        });
    });
    describe('ValidationError', () => {
        it('should create a validation error with correct exit code', () => {
            const error = new index_1.ValidationError('Invalid input');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.ValidationError);
            expect(error.message).toBe('Invalid input');
            expect(error.name).toBe('ValidationError');
            expect(error.exitCode).toBe(index_1.ExitCode.ValidationError);
        });
    });
    describe('NetworkError', () => {
        it('should create a network error with correct exit code', () => {
            const error = new index_1.NetworkError('Connection failed');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.NetworkError);
            expect(error.message).toBe('Connection failed');
            expect(error.name).toBe('NetworkError');
            expect(error.exitCode).toBe(index_1.ExitCode.NetworkError);
        });
    });
    describe('AuthenticationError', () => {
        it('should create an authentication error with correct exit code', () => {
            const error = new index_1.AuthenticationError('Invalid token');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.AuthenticationError);
            expect(error.message).toBe('Invalid token');
            expect(error.name).toBe('AuthenticationError');
            expect(error.exitCode).toBe(index_1.ExitCode.AuthenticationError);
        });
    });
    describe('NotFoundError', () => {
        it('should create a not found error with correct exit code', () => {
            const error = new index_1.NotFoundError('Resource not found');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.NotFoundError);
            expect(error.message).toBe('Resource not found');
            expect(error.name).toBe('NotFoundError');
            expect(error.exitCode).toBe(index_1.ExitCode.NotFoundError);
        });
    });
    describe('GitHubAPIError', () => {
        it('should create a GitHub API error with correct exit code', () => {
            const error = new index_1.GitHubAPIError('API rate limit exceeded');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.GitHubAPIError);
            expect(error.message).toBe('API rate limit exceeded');
            expect(error.name).toBe('GitHubAPIError');
            expect(error.exitCode).toBe(index_1.ExitCode.GitHubAPIError);
            expect(error.response).toBeUndefined();
        });
        it('should create a GitHub API error with response data', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API rate limit exceeded', responseData);
            expect(error.response).toBe(responseData);
        });
    });
    describe('ConfigurationError', () => {
        it('should create a configuration error with correct exit code', () => {
            const error = new index_1.ConfigurationError('Invalid configuration');
            expect(error).toBeInstanceOf(index_1.GHPError);
            expect(error).toBeInstanceOf(index_1.ConfigurationError);
            expect(error.message).toBe('Invalid configuration');
            expect(error.name).toBe('ConfigurationError');
            expect(error.exitCode).toBe(index_1.ExitCode.ConfigurationError);
        });
    });
});
describe('Error Handling Functions', () => {
    describe('handleError', () => {
        let consoleErrorSpy;
        let processExitSpy;
        beforeEach(() => {
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            processExitSpy = jest.spyOn(process, 'exit').mockImplementation((() => { }));
        });
        afterEach(() => {
            consoleErrorSpy.mockRestore();
            processExitSpy.mockRestore();
        });
        it('should handle GHPError correctly', () => {
            const error = new index_1.ValidationError('Invalid input');
            (0, index_1.handleError)(error);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Invalid input');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.ValidationError);
        });
        it('should handle GitHubAPIError with response data in verbose mode', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API error', responseData);
            (0, index_1.handleError)(error, true);
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GitHubAPIError);
        });
        it('should handle GitHubAPIError without response data details in non-verbose mode', () => {
            const responseData = { status: 403, message: 'Rate limit exceeded' };
            const error = new index_1.GitHubAPIError('API error', responseData);
            (0, index_1.handleError)(error, false);
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('GitHub API Error: API error'));
            expect(consoleErrorSpy).not.toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(responseData, null, 2)));
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GitHubAPIError);
        });
        it('should handle non-GHPError with message', () => {
            const error = new Error('Standard error');
            (0, index_1.handleError)(error);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Standard error');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GeneralError);
        });
        it('should handle non-Error objects', () => {
            (0, index_1.handleError)('String error');
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: String error');
            expect(processExitSpy).toHaveBeenCalledWith(index_1.ExitCode.GeneralError);
        });
        it('should print stack trace in verbose mode', () => {
            const error = new Error('With stack');
            error.stack = 'Error: With stack\n    at file.js:1:1';
            (0, index_1.handleError)(error, true);
            expect(consoleErrorSpy).toHaveBeenCalledWith('\nStack trace:');
            expect(consoleErrorSpy).toHaveBeenCalledWith(error.stack);
        });
    });
    describe('wrapWithErrorHandler', () => {
        it('should return function result on success', async () => {
            // Créer une fonction qui retourne toujours une valeur de succès
            const successFn = async () => 'success';
            const wrapped = (0, index_1.wrapWithErrorHandler)(successFn);
            const result = await wrapped();
            expect(result).toBe('success');
        });
        it('should pass arguments correctly to the wrapped function', async () => {
            const argTestFn = async (a, b) => `${a}-${b}`;
            const wrapped = (0, index_1.wrapWithErrorHandler)(argTestFn);
            const result = await wrapped('test', 123);
            expect(result).toBe('test-123');
        });
        it('should handle errors with default verbose setting', async () => {
            // Espionner sans empêcher le comportement normal
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            // Remplacer process.exit pour éviter qu'il ne termine le processus de test
            const originalExit = process.exit;
            process.exit = jest.fn();
            const errorFn = async () => {
                throw new index_1.ValidationError('Test validation error');
            };
            const wrapped = (0, index_1.wrapWithErrorHandler)(errorFn);
            // Exécuter la fonction mais ignorer l'erreur
            await wrapped().catch(() => { });
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error: Test validation error');
            expect(process.exit).toHaveBeenCalledWith(index_1.ExitCode.ValidationError);
            // Restaurer les fonctions originales
            consoleErrorSpy.mockRestore();
            process.exit = originalExit;
        });
        it('should handle errors with verbose=true', async () => {
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            // Remplacer process.exit
            const originalExit = process.exit;
            process.exit = jest.fn();
            const errorWithStackFn = async () => {
                const error = new Error('Error with stack');
                error.stack = 'Error: Error with stack\n    at file.js:1:1';
                throw error;
            };
            const wrapped = (0, index_1.wrapWithErrorHandler)(errorWithStackFn, true);
            // Exécuter la fonction mais ignorer l'erreur
            await wrapped().catch(() => { });
            expect(consoleErrorSpy).toHaveBeenCalledWith('\nStack trace:');
            expect(process.exit).toHaveBeenCalledWith(index_1.ExitCode.GeneralError);
            // Restaurer les fonctions originales
            consoleErrorSpy.mockRestore();
            process.exit = originalExit;
        });
    });
});
describe('Exit Codes', () => {
    it('should have correct exit code values', () => {
        expect(index_1.ExitCode.Success).toBe(0);
        expect(index_1.ExitCode.GeneralError).toBe(1);
        expect(index_1.ExitCode.ValidationError).toBe(2);
        expect(index_1.ExitCode.NetworkError).toBe(3);
        expect(index_1.ExitCode.AuthenticationError).toBe(4);
        expect(index_1.ExitCode.NotFoundError).toBe(5);
        expect(index_1.ExitCode.GitHubAPIError).toBe(6);
        expect(index_1.ExitCode.ConfigurationError).toBe(7);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,