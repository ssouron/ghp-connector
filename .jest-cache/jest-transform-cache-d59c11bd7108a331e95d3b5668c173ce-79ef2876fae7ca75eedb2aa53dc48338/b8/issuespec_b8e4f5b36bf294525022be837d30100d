a196ef35a177f33f9e9ff4bcbf2640d1
"use strict";
/**
 * Tests for issue commands
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../lib', () => {
    const originalLib = jest.requireActual('../lib');
    return {
        ...originalLib,
        GitHubClient: {
            fromConfig: jest.fn().mockReturnValue({
                listIssues: jest.fn().mockResolvedValue((0, mock_github_1.createMockIssueList)(3)),
                getIssue: jest.fn().mockImplementation((id) => Promise.resolve((0, mock_github_1.createMockIssueList)(1)[0])),
                createIssue: jest.fn().mockImplementation((title, body, options) => Promise.resolve((0, mock_github_1.createMockIssueList)(1)[0])),
                updateIssue: jest.fn().mockImplementation((id, options) => Promise.resolve((0, mock_github_1.createMockIssueList)(1)[0])),
            })
        },
        loadConfig: jest.fn().mockReturnValue({
            github: {
                owner: 'test-owner',
                repo: 'test-repo'
            },
            defaults: {
                issues: {
                    state: 'open'
                }
            }
        }),
        formatOutput: jest.fn().mockImplementation((data) => JSON.stringify(data)),
        wrapWithErrorHandler: jest.fn().mockImplementation((fn) => fn),
        cmdArgsToConfig: jest.fn().mockReturnValue({})
    };
});
const commander_1 = require("commander");
const issue_1 = require("./issue");
const mock_github_1 = require("../lib/test-helpers/mock-github");
// Spy on console.log
const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
describe('Issue Commands', () => {
    let program;
    beforeEach(() => {
        // Reset mocks
        jest.clearAllMocks();
        // Create a new Command instance
        program = new commander_1.Command();
        (0, issue_1.registerIssueCommands)(program);
    });
    afterAll(() => {
        // Restore console.log
        consoleLogSpy.mockRestore();
    });
    describe('issue list', () => {
        it('devrait enregistrer la commande list', () => {
            const listCommand = program.commands[0].commands.find(cmd => cmd.name() === 'list');
            expect(listCommand).toBeDefined();
            expect(listCommand?.description()).toBe('List issues in a repository');
        });
        it('devrait contenir les options appropriÃ©es', () => {
            const listCommand = program.commands[0].commands.find(cmd => cmd.name() === 'list');
            const options = listCommand?.options.map(opt => opt.flags);
            expect(options).toContain('-s, --state <state>');
            expect(options).toContain('-l, --limit <limit>');
            expect(options).toContain('-a, --assignee <assignee>');
            expect(options).toContain('-L, --label <labels>');
        });
    });
    describe('issue get', () => {
        it('devrait enregistrer la commande get', () => {
            const getCommand = program.commands[0].commands.find(cmd => cmd.name() === 'get');
            expect(getCommand).toBeDefined();
            expect(getCommand?.description()).toBe('Get details of a specific issue');
        });
    });
    describe('issue create', () => {
        it('devrait enregistrer la commande create', () => {
            const createCommand = program.commands[0].commands.find(cmd => cmd.name() === 'create');
            expect(createCommand).toBeDefined();
            expect(createCommand?.description()).toBe('Create a new issue');
        });
        it('devrait exiger un titre', () => {
            const createCommand = program.commands[0].commands.find(cmd => cmd.name() === 'create');
            const titleOption = createCommand?.options.find(opt => opt.flags.includes('--title'));
            expect(titleOption).toBeDefined();
            expect(titleOption?.required).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,