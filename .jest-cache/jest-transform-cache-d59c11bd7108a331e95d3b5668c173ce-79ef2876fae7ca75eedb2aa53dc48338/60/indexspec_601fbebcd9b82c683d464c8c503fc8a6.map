{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/formatters/index.spec.ts","mappings":";AAAA;;GAEG;;AAEH,mCASiB;AAEjB,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,IAAI,SAA6B,CAAC;QAElC,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,qBAAa,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,IAAI,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;YAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAI,SAAgC,CAAC;QAErC,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,sBAAc,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,SAAgC,CAAC;QAErC,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,wBAAgB,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACzB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;aAC1B,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAI,SAA8B,CAAC;QAEnC,UAAU,CAAC,GAAG,EAAE;YACd,SAAS,GAAG,IAAI,sBAAc,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,KAAK,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,2BAA2B;aAClC,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,MAAM,GAAG;gBACb,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,EAAE;gBAClD,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE;aACtD,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,IAAI,GAAG;gBACX,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;aACrC,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACnD,sEAAsE;YACtE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,IAAI,GAAG;gBACX,IAAI,EAAE,MAAM;gBACZ,WAAW,EAAE,SAAS;gBACtB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,CAAC;aACT,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,SAAS,GAAG,IAAA,uBAAe,EAAM,MAAM,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,qBAAa,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,SAAS,GAAG,IAAA,uBAAe,EAAQ,OAAO,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,sBAAc,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,SAAS,GAAG,IAAA,uBAAe,EAAM,SAAS,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,wBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,SAAS,GAAG,IAAA,uBAAe,EAAM,OAAO,CAAC,CAAC;YAChD,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,sBAAc,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,IAAA,uBAAe,GAAO,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,sBAAc,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,IAAI,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;YACvC,MAAM,CAAC,IAAA,oBAAY,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,IAAA,oBAAY,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,IAAA,oBAAY,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,IAAI,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;YACvC,MAAM,CAAC,IAAA,oBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACtF,MAAM,UAAU,GAAG,IAAA,oBAAY,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACtD,MAAM,aAAa,GAAG,IAAA,oBAAY,EAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC5D,MAAM,WAAW,GAAG,IAAA,oBAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YAExD,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAEzC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACrC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,iDAAiD;gBACxD,WAAW,EAAE,uBAAuB;aACrC,CAAC;YAEF,+DAA+D;YAC/D,MAAM,UAAU,GAAG,IAAA,oBAAY,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YAC9D,MAAM,WAAW,GAAG,IAAA,oBAAY,EAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;YAEhE,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;YACtD,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAE5C,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,wDAAwD,CAAC,CAAC;YACxF,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/formatters/index.spec.ts"],"sourcesContent":["/**\n * Unit tests for formatters module\n */\n\nimport {\n  FormatType,\n  Formatter,\n  JsonFormatter,\n  TableFormatter,\n  MinimalFormatter,\n  HumanFormatter,\n  createFormatter,\n  formatOutput\n} from './index';\n\ndescribe('Formatters Module', () => {\n  describe('JsonFormatter', () => {\n    let formatter: JsonFormatter<any>;\n\n    beforeEach(() => {\n      formatter = new JsonFormatter();\n    });\n\n    it('should format primitive data correctly', () => {\n      expect(formatter.format('test')).toBe('\"test\"');\n      expect(formatter.format(123)).toBe('123');\n      expect(formatter.format(true)).toBe('true');\n    });\n\n    it('should format object data with proper indentation', () => {\n      const data = { id: 1, name: 'Test Item' };\n      const expected = JSON.stringify(data, null, 2);\n      expect(formatter.format(data)).toBe(expected);\n    });\n\n    it('should format array data correctly', () => {\n      const data = [{ id: 1 }, { id: 2 }];\n      const expected = JSON.stringify(data, null, 2);\n      expect(formatter.format(data)).toBe(expected);\n    });\n\n    it('should handle empty data correctly', () => {\n      expect(formatter.format([])).toBe('[]');\n      expect(formatter.format({})).toBe('{}');\n      expect(formatter.format(null)).toBe('null');\n    });\n  });\n\n  describe('TableFormatter', () => {\n    let formatter: TableFormatter<any[]>;\n\n    beforeEach(() => {\n      formatter = new TableFormatter();\n    });\n\n    it('should handle empty data correctly', () => {\n      expect(formatter.format([])).toBe('No data to display');\n    });\n\n    it('should format array data with item count', () => {\n      const data = [{ id: 1 }, { id: 2 }];\n      expect(formatter.format(data)).toBe('2 items\\n');\n    });\n  });\n\n  describe('MinimalFormatter', () => {\n    let formatter: MinimalFormatter<any>;\n\n    beforeEach(() => {\n      formatter = new MinimalFormatter();\n    });\n\n    it('should format primitive data correctly', () => {\n      expect(formatter.format('test')).toBe('test');\n      expect(formatter.format(123)).toBe('123');\n      expect(formatter.format(true)).toBe('true');\n    });\n\n    it('should extract IDs from objects', () => {\n      expect(formatter.format({ id: 123, name: 'Test Item' })).toBe('123');\n    });\n\n    it('should extract numbers from GitHub issues', () => {\n      expect(formatter.format({ number: 42, title: 'Issue Title' })).toBe('42');\n    });\n\n    it('should extract names when ID is not available', () => {\n      expect(formatter.format({ name: 'Test Name', description: 'Test Description' })).toBe('Test Name');\n    });\n\n    it('should handle arrays of objects by extracting identifiers', () => {\n      const data = [\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' }\n      ];\n      expect(formatter.format(data)).toBe('1\\n2');\n    });\n\n    it('should handle arrays of primitives', () => {\n      expect(formatter.format([1, 2, 3])).toBe('1\\n2\\n3');\n    });\n\n    it('should return empty string for objects with no identifiable properties', () => {\n      expect(formatter.format({ description: 'No ID or name' })).toBe('');\n    });\n\n    it('should handle empty data correctly', () => {\n      expect(formatter.format([])).toBe('');\n      expect(formatter.format({})).toBe('');\n    });\n  });\n\n  describe('HumanFormatter', () => {\n    let formatter: HumanFormatter<any>;\n\n    beforeEach(() => {\n      formatter = new HumanFormatter();\n    });\n\n    it('should format primitive data correctly', () => {\n      expect(formatter.format('test')).toBe('test');\n      expect(formatter.format(123)).toBe('123');\n      expect(formatter.format(true)).toBe('true');\n    });\n\n    it('should format GitHub issues with title and number', () => {\n      const issue = { number: 42, title: 'Bug fix', state: 'open' };\n      expect(formatter.format(issue)).toBe('#42 Bug fix [open]');\n    });\n\n    it('should include body in GitHub issue formatting if available', () => {\n      const issue = { \n        number: 42, \n        title: 'Bug fix', \n        state: 'open',\n        body: 'This is a bug description'\n      };\n      expect(formatter.format(issue)).toBe('#42 Bug fix [open]\\n\\nThis is a bug description');\n    });\n\n    it('should format arrays of GitHub issues', () => {\n      const issues = [\n        { number: 1, title: 'First Issue', state: 'open' },\n        { number: 2, title: 'Second Issue', state: 'closed' }\n      ];\n      expect(formatter.format(issues)).toBe('#1 First Issue [open]\\n\\n#2 Second Issue [closed]');\n    });\n\n    it('should show \"No items found\" for empty arrays', () => {\n      expect(formatter.format([])).toBe('No items found');\n    });\n\n    it('should return \"null\" for null objects', () => {\n      expect(formatter.format(null)).toBe('null');\n    });\n\n    it('should format generic objects with key-value pairs', () => {\n      const data = { name: 'Test', count: 42 };\n      expect(formatter.format(data)).toBe('name: Test\\ncount: 42');\n    });\n\n    it('should handle nested objects', () => {\n      const data = { \n        name: 'Parent',\n        child: { name: 'Child', value: 123 }\n      };\n      expect(formatter.format(data)).toContain('name: Parent');\n      expect(formatter.format(data)).toContain('child:');\n      // Vérifier que le contenu est présent, peu importe le formatage exact\n      expect(formatter.format(data)).toContain('Child');\n      expect(formatter.format(data)).toContain('123');\n    });\n\n    it('should skip undefined and null values', () => {\n      const data = {\n        name: 'Test',\n        description: undefined,\n        value: null,\n        count: 0\n      };\n      expect(formatter.format(data)).toBe('name: Test\\ncount: 0');\n    });\n  });\n\n  describe('createFormatter', () => {\n    it('should create JsonFormatter when type is json', () => {\n      const formatter = createFormatter<any>('json');\n      expect(formatter).toBeInstanceOf(JsonFormatter);\n    });\n\n    it('should create TableFormatter when type is table', () => {\n      const formatter = createFormatter<any[]>('table');\n      expect(formatter).toBeInstanceOf(TableFormatter);\n    });\n\n    it('should create MinimalFormatter when type is minimal', () => {\n      const formatter = createFormatter<any>('minimal');\n      expect(formatter).toBeInstanceOf(MinimalFormatter);\n    });\n\n    it('should create HumanFormatter when type is human', () => {\n      const formatter = createFormatter<any>('human');\n      expect(formatter).toBeInstanceOf(HumanFormatter);\n    });\n\n    it('should create HumanFormatter by default', () => {\n      const formatter = createFormatter<any>();\n      expect(formatter).toBeInstanceOf(HumanFormatter);\n    });\n  });\n\n  describe('formatOutput', () => {\n    it('should format data using the specified formatter', () => {\n      const data = { id: 123, name: 'Test' };\n      expect(formatOutput(data, 'json')).toBe(JSON.stringify(data, null, 2));\n      expect(formatOutput(data, 'minimal')).toBe('123');\n      expect(formatOutput(data, 'human')).toBe('id: 123\\nname: Test');\n    });\n\n    it('should use HumanFormatter by default', () => {\n      const data = { id: 123, name: 'Test' };\n      expect(formatOutput(data)).toBe('id: 123\\nname: Test');\n    });\n\n    it('should handle large datasets', () => {\n      const largeDataset = Array(100).fill(0).map((_, i) => ({ id: i, name: `Item ${i}` }));\n      const jsonResult = formatOutput(largeDataset, 'json');\n      const minimalResult = formatOutput(largeDataset, 'minimal');\n      const humanResult = formatOutput(largeDataset, 'human');\n      \n      expect(jsonResult).toContain('\"id\": 0');\n      expect(jsonResult).toContain('\"id\": 99');\n      \n      expect(minimalResult.split('\\n').length).toBe(100);\n      expect(minimalResult).toContain('0');\n      expect(minimalResult).toContain('99');\n      \n      expect(humanResult).toContain('id: 0');\n      expect(humanResult).toContain('id: 99');\n    });\n\n    it('should handle special characters in data', () => {\n      const dataWithSpecialChars = {\n        title: 'Special: \"quotes\", \\'apostrophes\\', &amp; more!',\n        description: '< > & \" \\' \\n \\t \\\\ /'\n      };\n      \n      // Test that each formatter properly handles special characters\n      const jsonResult = formatOutput(dataWithSpecialChars, 'json');\n      const humanResult = formatOutput(dataWithSpecialChars, 'human');\n      \n      expect(jsonResult).toContain('Special: \\\\\"quotes\\\\\"');\n      expect(jsonResult).toContain('\\'apostrophes\\'');\n      expect(jsonResult).toContain('&amp; more!');\n      \n      expect(humanResult).toContain('title: Special: \"quotes\", \\'apostrophes\\', &amp; more!');\n      expect(humanResult).toContain('description: < > & \" \\' \\n \\t \\\\ /');\n    });\n  });\n}); "],"version":3}