{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/commands/issue.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/commands/issue.ts"],"sourcesContent":["/**\n * Issue commands\n * Commands for working with GitHub issues\n */\n\nimport { Command } from 'commander';\nimport { \n  GitHubClient, \n  loadConfig, \n  formatOutput, \n  wrapWithErrorHandler, \n  ValidationError,\n  FormatType,\n  cmdArgsToConfig\n} from '../lib';\n\n/**\n * Register issue commands with the CLI\n */\nexport function registerIssueCommands(program: Command): void {\n  const issueCommand = program\n    .command('issue')\n    .description('Manage GitHub issues');\n\n  // List issues\n  issueCommand\n    .command('list')\n    .description('List issues in a repository')\n    .option('-s, --state <state>', 'Issue state (open, closed, all)', 'open')\n    .option('-l, --limit <limit>', 'Maximum number of issues to return', '10')\n    .option('-a, --assignee <assignee>', 'Filter by assignee')\n    .option('-L, --label <labels>', 'Filter by label, comma-separated')\n    .option('-S, --sort <sort>', 'Sort issues by (created, updated, comments)', 'created')\n    .option('-d, --direction <direction>', 'Sort direction (asc, desc)', 'desc')\n    .action(wrapWithErrorHandler(listIssues));\n\n  // Get issue\n  issueCommand\n    .command('get')\n    .description('Get details of a specific issue')\n    .argument('<issue-number>', 'Issue number')\n    .action(wrapWithErrorHandler(getIssue));\n\n  // Create issue\n  issueCommand\n    .command('create')\n    .description('Create a new issue')\n    .requiredOption('-t, --title <title>', 'Issue title')\n    .option('-b, --body <body>', 'Issue body')\n    .option('-a, --assignees <assignees>', 'Comma-separated list of assignees')\n    .option('-L, --labels <labels>', 'Comma-separated list of labels')\n    .action(wrapWithErrorHandler(createIssue));\n\n  // Update issue\n  issueCommand\n    .command('update')\n    .description('Update an existing issue')\n    .argument('<issue-number>', 'Issue number')\n    .option('-t, --title <title>', 'New issue title')\n    .option('-b, --body <body>', 'New issue body')\n    .option('-s, --state <state>', 'Issue state (open, closed)')\n    .option('-a, --assignees <assignees>', 'Comma-separated list of assignees')\n    .option('-L, --labels <labels>', 'Comma-separated list of labels')\n    .action(wrapWithErrorHandler(updateIssue));\n}\n\n/**\n * List issues in a repository\n */\nasync function listIssues(options: any): Promise<void> {\n  // Parse command line options\n  const formatType = options.parent.parent.opts().format as FormatType;\n  const verbose = options.parent.parent.opts().verbose || false;\n  \n  // Load config and merge with command line options\n  const config = loadConfig(cmdArgsToConfig(options.parent.parent.opts()));\n  \n  // Create GitHub client\n  const client = GitHubClient.fromConfig(config);\n  \n  // Prepare API options\n  const apiOptions = {\n    state: options.state || config.defaults.issues.state,\n    per_page: parseInt(options.limit, 10) || 10,\n    assignee: options.assignee,\n    labels: options.label,\n    sort: options.sort,\n    direction: options.direction,\n  };\n  \n  // Optional extra information in verbose mode\n  if (verbose) {\n    console.log(`Fetching issues from ${config.github.owner}/${config.github.repo}`);\n    console.log(`Options: ${JSON.stringify(apiOptions)}`);\n  }\n  \n  // Fetch issues\n  const issues = await client.listIssues(apiOptions);\n  \n  // Print results\n  console.log(formatOutput(issues, formatType));\n}\n\n/**\n * Get details of a specific issue\n */\nasync function getIssue(issueNumber: string, options: any): Promise<void> {\n  // Parse command line options\n  const formatType = options.parent.parent.opts().format as FormatType;\n  const verbose = options.parent.parent.opts().verbose || false;\n  \n  // Validate issue number\n  const issueId = parseInt(issueNumber, 10);\n  if (isNaN(issueId)) {\n    throw new ValidationError('Issue number must be a valid number');\n  }\n  \n  // Load config and merge with command line options\n  const config = loadConfig(cmdArgsToConfig(options.parent.parent.opts()));\n  \n  // Create GitHub client\n  const client = GitHubClient.fromConfig(config);\n  \n  // Optional extra information in verbose mode\n  if (verbose) {\n    console.log(`Fetching issue #${issueId} from ${config.github.owner}/${config.github.repo}`);\n  }\n  \n  // Fetch issue\n  const issue = await client.getIssue(issueId);\n  \n  // Print results\n  console.log(formatOutput(issue, formatType));\n}\n\n/**\n * Create a new issue\n */\nasync function createIssue(options: any): Promise<void> {\n  // Parse command line options\n  const formatType = options.parent.parent.opts().format as FormatType;\n  const verbose = options.parent.parent.opts().verbose || false;\n  \n  // Validate required fields\n  if (!options.title) {\n    throw new ValidationError('Issue title is required');\n  }\n  \n  // Load config and merge with command line options\n  const config = loadConfig(cmdArgsToConfig(options.parent.parent.opts()));\n  \n  // Create GitHub client\n  const client = GitHubClient.fromConfig(config);\n  \n  // Prepare API options\n  const apiOptions: Record<string, any> = {};\n  \n  if (options.assignees) {\n    apiOptions.assignees = options.assignees.split(',').map((a: string) => a.trim());\n  }\n  \n  if (options.labels) {\n    apiOptions.labels = options.labels.split(',').map((l: string) => l.trim());\n  }\n  \n  // Optional extra information in verbose mode\n  if (verbose) {\n    console.log(`Creating issue in ${config.github.owner}/${config.github.repo}`);\n    console.log(`Title: ${options.title}`);\n    if (options.body) console.log(`Body: ${options.body}`);\n    if (apiOptions.assignees) console.log(`Assignees: ${apiOptions.assignees.join(', ')}`);\n    if (apiOptions.labels) console.log(`Labels: ${apiOptions.labels.join(', ')}`);\n  }\n  \n  // Create issue\n  const issue = await client.createIssue(options.title, options.body, apiOptions);\n  \n  // Print results\n  console.log(formatOutput(issue, formatType));\n}\n\n/**\n * Update an existing issue\n */\nasync function updateIssue(issueNumber: string, options: any): Promise<void> {\n  // Parse command line options\n  const formatType = options.parent.parent.opts().format as FormatType;\n  const verbose = options.parent.parent.opts().verbose || false;\n  \n  // Validate issue number\n  const issueId = parseInt(issueNumber, 10);\n  if (isNaN(issueId)) {\n    throw new ValidationError('Issue number must be a valid number');\n  }\n  \n  // Load config and merge with command line options\n  const config = loadConfig(cmdArgsToConfig(options.parent.parent.opts()));\n  \n  // Create GitHub client\n  const client = GitHubClient.fromConfig(config);\n  \n  // Prepare API options\n  const apiOptions: Record<string, any> = {};\n  \n  if (options.title) apiOptions.title = options.title;\n  if (options.body) apiOptions.body = options.body;\n  if (options.state) apiOptions.state = options.state;\n  \n  if (options.assignees) {\n    apiOptions.assignees = options.assignees.split(',').map((a: string) => a.trim());\n  }\n  \n  if (options.labels) {\n    apiOptions.labels = options.labels.split(',').map((l: string) => l.trim());\n  }\n  \n  // Optional extra information in verbose mode\n  if (verbose) {\n    console.log(`Updating issue #${issueId} in ${config.github.owner}/${config.github.repo}`);\n    Object.entries(apiOptions).forEach(([key, value]) => {\n      console.log(`${key}: ${value}`);\n    });\n  }\n  \n  // Update issue\n  const issue = await client.updateIssue(issueId, apiOptions);\n  \n  // Print results\n  console.log(formatOutput(issue, formatType));\n} "],"version":3}