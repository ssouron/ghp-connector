{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/fs-mock.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/fs-mock.ts"],"sourcesContent":["/**\n * Mocks pour le système de fichiers (fs)\n */\n\nimport * as fs from 'fs';\n\n/**\n * Interface pour le système de fichiers virtuel\n */\nexport interface VirtualFileSystem {\n  [path: string]: string | Buffer;\n}\n\n/**\n * Crée un mock pour le module fs\n */\nexport function mockFs() {\n  // Sauvegarde des fonctions originales\n  const original = {\n    existsSync: fs.existsSync,\n    readFileSync: fs.readFileSync,\n    writeFileSync: fs.writeFileSync,\n    mkdirSync: fs.mkdirSync,\n    rmSync: fs.rmSync\n  };\n\n  // Création des mocks\n  jest.spyOn(fs, 'existsSync').mockImplementation(() => false);\n  jest.spyOn(fs, 'readFileSync').mockImplementation(() => Buffer.from(''));\n  jest.spyOn(fs, 'writeFileSync').mockImplementation(() => undefined);\n  jest.spyOn(fs, 'mkdirSync').mockImplementation(() => undefined);\n  jest.spyOn(fs, 'rmSync').mockImplementation(() => undefined);\n\n  // Fonction pour restaurer les fonctions originales\n  const restore = () => {\n    jest.spyOn(fs, 'existsSync').mockImplementation(original.existsSync);\n    jest.spyOn(fs, 'readFileSync').mockImplementation(original.readFileSync);\n    jest.spyOn(fs, 'writeFileSync').mockImplementation(original.writeFileSync);\n    jest.spyOn(fs, 'mkdirSync').mockImplementation(original.mkdirSync);\n    jest.spyOn(fs, 'rmSync').mockImplementation(original.rmSync);\n  };\n\n  return { fs, restore };\n}\n\n/**\n * Crée un système de fichiers virtuel pour les tests\n */\nexport function mockVirtualFs(initialFiles: VirtualFileSystem = {}) {\n  const virtualFs: VirtualFileSystem = { ...initialFiles };\n  \n  // Sauvegarde des fonctions originales\n  const original = {\n    existsSync: fs.existsSync,\n    readFileSync: fs.readFileSync,\n    writeFileSync: fs.writeFileSync,\n    mkdirSync: fs.mkdirSync,\n    rmSync: fs.rmSync\n  };\n\n  // Mock existsSync\n  jest.spyOn(fs, 'existsSync').mockImplementation((path) => {\n    const pathStr = path.toString();\n    return pathStr in virtualFs;\n  });\n\n  // Mock readFileSync\n  jest.spyOn(fs, 'readFileSync').mockImplementation((path, options) => {\n    const pathStr = path.toString();\n    if (!(pathStr in virtualFs)) {\n      const error = new Error(`ENOENT: no such file or directory, open '${pathStr}'`) as NodeJS.ErrnoException;\n      error.code = 'ENOENT';\n      throw error;\n    }\n\n    const content = virtualFs[pathStr];\n    const encoding = typeof options === 'string' ? options : options?.encoding;\n    \n    if (typeof content === 'string' && encoding === 'utf8') {\n      return content;\n    }\n    \n    return Buffer.isBuffer(content) ? content : Buffer.from(String(content));\n  });\n\n  // Mock writeFileSync\n  jest.spyOn(fs, 'writeFileSync').mockImplementation((path, data) => {\n    const pathStr = path.toString();\n    // Conversion safe pour s'assurer que data est stockée correctement\n    if (Buffer.isBuffer(data)) {\n      virtualFs[pathStr] = data;\n    } else if (typeof data === 'string') {\n      virtualFs[pathStr] = data;\n    } else {\n      // Pour d'autres types ArrayBufferView\n      try {\n        virtualFs[pathStr] = Buffer.from(data as any);  \n      } catch (e) {\n        // Fallback en cas d'erreur\n        virtualFs[pathStr] = data.toString();\n      }\n    }\n  });\n\n  // Mock mkdirSync\n  jest.spyOn(fs, 'mkdirSync').mockImplementation((path) => {\n    const pathStr = path.toString();\n    virtualFs[pathStr] = '';\n    return pathStr;\n  });\n\n  // Mock rmSync\n  jest.spyOn(fs, 'rmSync').mockImplementation((path) => {\n    const pathStr = path.toString();\n    if (pathStr in virtualFs) {\n      delete virtualFs[pathStr];\n    }\n  });\n\n  // Fonction pour restaurer les fonctions originales\n  const restore = () => {\n    jest.spyOn(fs, 'existsSync').mockImplementation(original.existsSync);\n    jest.spyOn(fs, 'readFileSync').mockImplementation(original.readFileSync);\n    jest.spyOn(fs, 'writeFileSync').mockImplementation(original.writeFileSync);\n    jest.spyOn(fs, 'mkdirSync').mockImplementation(original.mkdirSync);\n    jest.spyOn(fs, 'rmSync').mockImplementation(original.rmSync);\n  };\n\n  // Fonction pour accéder au système de fichiers virtuel\n  const getVirtualFs = () => virtualFs;\n\n  return { fs, restore, getVirtualFs };\n} "],"version":3}