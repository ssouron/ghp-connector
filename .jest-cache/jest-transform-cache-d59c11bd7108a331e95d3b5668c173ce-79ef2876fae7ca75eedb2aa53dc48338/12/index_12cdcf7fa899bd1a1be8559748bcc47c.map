{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/errors/index.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/errors/index.ts"],"sourcesContent":["/**\n * Error handling utilities\n * Provides custom error classes and error handling functions\n */\n\n/**\n * Standard error exit codes\n */\nexport enum ExitCode {\n  Success = 0,\n  GeneralError = 1,\n  ValidationError = 2,\n  NetworkError = 3,\n  AuthenticationError = 4,\n  NotFoundError = 5,\n  GitHubAPIError = 6,\n  ConfigurationError = 7,\n}\n\n/**\n * Base error class for GHP Connector\n */\nexport class GHPError extends Error {\n  exitCode: ExitCode;\n  \n  constructor(message: string, exitCode: ExitCode = ExitCode.GeneralError) {\n    super(message);\n    this.name = this.constructor.name;\n    this.exitCode = exitCode;\n  }\n}\n\n/**\n * Error thrown when input validation fails\n */\nexport class ValidationError extends GHPError {\n  constructor(message: string) {\n    super(message, ExitCode.ValidationError);\n  }\n}\n\n/**\n * Error thrown when a network error occurs\n */\nexport class NetworkError extends GHPError {\n  constructor(message: string) {\n    super(message, ExitCode.NetworkError);\n  }\n}\n\n/**\n * Error thrown when authentication fails\n */\nexport class AuthenticationError extends GHPError {\n  constructor(message: string) {\n    super(message, ExitCode.AuthenticationError);\n  }\n}\n\n/**\n * Error thrown when a resource is not found\n */\nexport class NotFoundError extends GHPError {\n  constructor(message: string) {\n    super(message, ExitCode.NotFoundError);\n  }\n}\n\n/**\n * Error thrown when a GitHub API error occurs\n */\nexport class GitHubAPIError extends GHPError {\n  response?: any;\n  \n  constructor(message: string, response?: any) {\n    super(message, ExitCode.GitHubAPIError);\n    this.response = response;\n  }\n}\n\n/**\n * Error thrown when there's a configuration error\n */\nexport class ConfigurationError extends GHPError {\n  constructor(message: string) {\n    super(message, ExitCode.ConfigurationError);\n  }\n}\n\n/**\n * Handle errors and provide user-friendly messages\n */\nexport function handleError(error: any, verbose = false): void {\n  // Determine if it's a known error type\n  const isGHPError = error instanceof GHPError;\n  \n  // Get the exit code\n  const exitCode = isGHPError ? error.exitCode : ExitCode.GeneralError;\n  \n  // Format the error message\n  let message: string;\n  \n  if (error instanceof GitHubAPIError && error.response) {\n    if (verbose) {\n      message = `GitHub API Error: ${error.message}\\nResponse: ${JSON.stringify(error.response, null, 2)}`;\n    } else {\n      message = `GitHub API Error: ${error.message}`;\n    }\n  } else if (error.message) {\n    message = error.message;\n  } else {\n    message = String(error);\n  }\n  \n  // Print error message\n  console.error(`Error: ${message}`);\n  \n  // In verbose mode, print stack trace for debugging\n  if (verbose && error.stack) {\n    console.error('\\nStack trace:');\n    console.error(error.stack);\n  }\n  \n  // Exit process with appropriate code\n  process.exit(exitCode);\n}\n\n/**\n * Wrap a function to handle errors\n */\nexport function wrapWithErrorHandler<T extends any[], R>(\n  fn: (...args: T) => Promise<R>,\n  verbose = false\n): (...args: T) => Promise<R> {\n  return async (...args: T): Promise<R> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      handleError(error, verbose);\n      // This line is never reached, but TypeScript needs a return statement\n      throw error;\n    }\n  };\n} "],"version":3}