{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/env-mock.ts","mappings":";AAAA;;GAEG;;AAiEH,0BAuBC;AAMD,sCAQC;AAMD,8BAUC;AA1GD;;;GAGG;AACH,SAAS,SAAS;IAChB,OAAO,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAC5B,CAAC;AAED;;;GAGG;AACH,SAAS,UAAU,CAAC,MAA0C;IAC5D,qEAAqE;IACrE,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3C,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC;YACrB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,sCAAsC;IACtC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;QAClD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC;IACH,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAgB,OAAO,CAAC,UAA0B,EAAE;IAClD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,wBAAwB;IACxB,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACxD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBACxB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAED,0BAA0B;IAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAChC,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,wCAAwC;IACxC,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAED;;;GAGG;AACH,SAAgB,aAAa;IAC3B,OAAO,OAAO,CAAC;QACb,IAAI,EAAE;YACJ,YAAY,EAAE,6BAA6B;YAC3C,cAAc,EAAE,wBAAwB;YACxC,iBAAiB,EAAE,sBAAsB;SAC1C;KACF,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,SAAgB,SAAS;IACvB,OAAO,OAAO,CAAC;QACb,IAAI,EAAE;YACJ,EAAE,EAAE,MAAM;YACV,cAAc,EAAE,MAAM;YACtB,eAAe,EAAE,eAAe;YAChC,aAAa,EAAE,OAAO;YACtB,YAAY,EAAE,0BAA0B;SACzC;KACF,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/env-mock.ts"],"sourcesContent":["/**\n * Mocks pour les variables d'environnement\n */\n\n/**\n * Options pour le mock des variables d'environnement\n */\nexport interface EnvMockOptions {\n  /** Variables d'environnement à définir */\n  vars?: Record<string, string | undefined>;\n  /** Variables à supprimer */\n  unset?: string[];\n}\n\n/**\n * Sauvegarde les variables d'environnement actuelles\n * @returns Copie des variables d'environnement\n */\nfunction backupEnv(): Record<string, string | undefined> {\n  return { ...process.env };\n}\n\n/**\n * Restaure les variables d'environnement à partir d'une sauvegarde\n * @param backup Sauvegarde des variables d'environnement\n */\nfunction restoreEnv(backup: Record<string, string | undefined>): void {\n  // Supprime toutes les variables qui n'étaient pas dans la sauvegarde\n  for (const key of Object.keys(process.env)) {\n    if (!(key in backup)) {\n      delete process.env[key];\n    }\n  }\n  \n  // Restaure les variables sauvegardées\n  for (const [key, value] of Object.entries(backup)) {\n    if (value === undefined) {\n      delete process.env[key];\n    } else {\n      process.env[key] = value;\n    }\n  }\n}\n\n/**\n * Mock pour les variables d'environnement\n * \n * @example\n * ```\n * // Dans un test\n * const restoreEnv = mockEnv({\n *   vars: {\n *     GITHUB_TOKEN: 'mock-token',\n *     NODE_ENV: 'test'\n *   },\n *   unset: ['HOME']\n * });\n * \n * // Puis, dans le teardown du test\n * afterEach(() => {\n *   restoreEnv();\n * });\n * ```\n * \n * @param options Options de configuration\n * @returns Fonction pour restaurer les variables d'environnement\n */\nexport function mockEnv(options: EnvMockOptions = {}): () => void {\n  const backup = backupEnv();\n  \n  // Définir les variables\n  if (options.vars) {\n    for (const [key, value] of Object.entries(options.vars)) {\n      if (value === undefined) {\n        delete process.env[key];\n      } else {\n        process.env[key] = value;\n      }\n    }\n  }\n  \n  // Supprimer les variables\n  if (options.unset) {\n    for (const key of options.unset) {\n      delete process.env[key];\n    }\n  }\n  \n  // Retourner la fonction de restauration\n  return () => restoreEnv(backup);\n}\n\n/**\n * Configure les variables d'environnement pour les tests GitHub\n * @returns Fonction pour restaurer les variables d'environnement\n */\nexport function mockGitHubEnv(): () => void {\n  return mockEnv({\n    vars: {\n      GITHUB_TOKEN: 'mock-github-token-for-tests',\n      GITHUB_API_URL: 'https://api.github.com',\n      GITHUB_REPOSITORY: 'test-owner/test-repo'\n    }\n  });\n}\n\n/**\n * Configure les variables d'environnement pour les tests en mode CI\n * @returns Fonction pour restaurer les variables d'environnement\n */\nexport function mockCIEnv(): () => void {\n  return mockEnv({\n    vars: {\n      CI: 'true',\n      GITHUB_ACTIONS: 'true',\n      GITHUB_WORKFLOW: 'Test Workflow',\n      GITHUB_RUN_ID: '12345',\n      GITHUB_TOKEN: 'mock-github-token-for-ci'\n    }\n  });\n} "],"version":3}