42beddcada14c685562962ce9ddb2213
"use strict";
/**
 * Issue commands
 * Commands for working with GitHub issues
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerIssueCommands = registerIssueCommands;
const lib_1 = require("../lib");
/**
 * Register issue commands with the CLI
 */
function registerIssueCommands(program) {
    const issueCommand = program
        .command('issue')
        .description('Manage GitHub issues');
    // List issues
    issueCommand
        .command('list')
        .description('List issues in a repository')
        .option('-s, --state <state>', 'Issue state (open, closed, all)', 'open')
        .option('-l, --limit <limit>', 'Maximum number of issues to return', '10')
        .option('-a, --assignee <assignee>', 'Filter by assignee')
        .option('-L, --label <labels>', 'Filter by label, comma-separated')
        .option('-S, --sort <sort>', 'Sort issues by (created, updated, comments)', 'created')
        .option('-d, --direction <direction>', 'Sort direction (asc, desc)', 'desc')
        .action((0, lib_1.wrapWithErrorHandler)(listIssues));
    // Get issue
    issueCommand
        .command('get')
        .description('Get details of a specific issue')
        .argument('<issue-number>', 'Issue number')
        .action((0, lib_1.wrapWithErrorHandler)(getIssue));
    // Create issue
    issueCommand
        .command('create')
        .description('Create a new issue')
        .requiredOption('-t, --title <title>', 'Issue title')
        .option('-b, --body <body>', 'Issue body')
        .option('-a, --assignees <assignees>', 'Comma-separated list of assignees')
        .option('-L, --labels <labels>', 'Comma-separated list of labels')
        .action((0, lib_1.wrapWithErrorHandler)(createIssue));
    // Update issue
    issueCommand
        .command('update')
        .description('Update an existing issue')
        .argument('<issue-number>', 'Issue number')
        .option('-t, --title <title>', 'New issue title')
        .option('-b, --body <body>', 'New issue body')
        .option('-s, --state <state>', 'Issue state (open, closed)')
        .option('-a, --assignees <assignees>', 'Comma-separated list of assignees')
        .option('-L, --labels <labels>', 'Comma-separated list of labels')
        .action((0, lib_1.wrapWithErrorHandler)(updateIssue));
}
/**
 * List issues in a repository
 */
async function listIssues(options) {
    // Parse command line options
    const formatType = options.parent.parent.opts().format;
    const verbose = options.parent.parent.opts().verbose || false;
    // Load config and merge with command line options
    const config = (0, lib_1.loadConfig)((0, lib_1.cmdArgsToConfig)(options.parent.parent.opts()));
    // Create GitHub client
    const client = lib_1.GitHubClient.fromConfig(config);
    // Prepare API options
    const apiOptions = {
        state: options.state || config.defaults.issues.state,
        per_page: parseInt(options.limit, 10) || 10,
        assignee: options.assignee,
        labels: options.label,
        sort: options.sort,
        direction: options.direction,
    };
    // Optional extra information in verbose mode
    if (verbose) {
        console.log(`Fetching issues from ${config.github.owner}/${config.github.repo}`);
        console.log(`Options: ${JSON.stringify(apiOptions)}`);
    }
    // Fetch issues
    const issues = await client.listIssues(apiOptions);
    // Print results
    console.log((0, lib_1.formatOutput)(issues, formatType));
}
/**
 * Get details of a specific issue
 */
async function getIssue(issueNumber, options) {
    // Parse command line options
    const formatType = options.parent.parent.opts().format;
    const verbose = options.parent.parent.opts().verbose || false;
    // Validate issue number
    const issueId = parseInt(issueNumber, 10);
    if (isNaN(issueId)) {
        throw new lib_1.ValidationError('Issue number must be a valid number');
    }
    // Load config and merge with command line options
    const config = (0, lib_1.loadConfig)((0, lib_1.cmdArgsToConfig)(options.parent.parent.opts()));
    // Create GitHub client
    const client = lib_1.GitHubClient.fromConfig(config);
    // Optional extra information in verbose mode
    if (verbose) {
        console.log(`Fetching issue #${issueId} from ${config.github.owner}/${config.github.repo}`);
    }
    // Fetch issue
    const issue = await client.getIssue(issueId);
    // Print results
    console.log((0, lib_1.formatOutput)(issue, formatType));
}
/**
 * Create a new issue
 */
async function createIssue(options) {
    // Parse command line options
    const formatType = options.parent.parent.opts().format;
    const verbose = options.parent.parent.opts().verbose || false;
    // Validate required fields
    if (!options.title) {
        throw new lib_1.ValidationError('Issue title is required');
    }
    // Load config and merge with command line options
    const config = (0, lib_1.loadConfig)((0, lib_1.cmdArgsToConfig)(options.parent.parent.opts()));
    // Create GitHub client
    const client = lib_1.GitHubClient.fromConfig(config);
    // Prepare API options
    const apiOptions = {};
    if (options.assignees) {
        apiOptions.assignees = options.assignees.split(',').map((a) => a.trim());
    }
    if (options.labels) {
        apiOptions.labels = options.labels.split(',').map((l) => l.trim());
    }
    // Optional extra information in verbose mode
    if (verbose) {
        console.log(`Creating issue in ${config.github.owner}/${config.github.repo}`);
        console.log(`Title: ${options.title}`);
        if (options.body)
            console.log(`Body: ${options.body}`);
        if (apiOptions.assignees)
            console.log(`Assignees: ${apiOptions.assignees.join(', ')}`);
        if (apiOptions.labels)
            console.log(`Labels: ${apiOptions.labels.join(', ')}`);
    }
    // Create issue
    const issue = await client.createIssue(options.title, options.body, apiOptions);
    // Print results
    console.log((0, lib_1.formatOutput)(issue, formatType));
}
/**
 * Update an existing issue
 */
async function updateIssue(issueNumber, options) {
    // Parse command line options
    const formatType = options.parent.parent.opts().format;
    const verbose = options.parent.parent.opts().verbose || false;
    // Validate issue number
    const issueId = parseInt(issueNumber, 10);
    if (isNaN(issueId)) {
        throw new lib_1.ValidationError('Issue number must be a valid number');
    }
    // Load config and merge with command line options
    const config = (0, lib_1.loadConfig)((0, lib_1.cmdArgsToConfig)(options.parent.parent.opts()));
    // Create GitHub client
    const client = lib_1.GitHubClient.fromConfig(config);
    // Prepare API options
    const apiOptions = {};
    if (options.title)
        apiOptions.title = options.title;
    if (options.body)
        apiOptions.body = options.body;
    if (options.state)
        apiOptions.state = options.state;
    if (options.assignees) {
        apiOptions.assignees = options.assignees.split(',').map((a) => a.trim());
    }
    if (options.labels) {
        apiOptions.labels = options.labels.split(',').map((l) => l.trim());
    }
    // Optional extra information in verbose mode
    if (verbose) {
        console.log(`Updating issue #${issueId} in ${config.github.owner}/${config.github.repo}`);
        Object.entries(apiOptions).forEach(([key, value]) => {
            console.log(`${key}: ${value}`);
        });
    }
    // Update issue
    const issue = await client.updateIssue(issueId, apiOptions);
    // Print results
    console.log((0, lib_1.formatOutput)(issue, formatType));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,