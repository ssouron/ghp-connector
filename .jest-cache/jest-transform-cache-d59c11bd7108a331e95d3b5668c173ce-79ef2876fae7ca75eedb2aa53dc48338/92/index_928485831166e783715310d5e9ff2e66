46071879e11c1960e0c2bf786c01ba67
"use strict";
/**
 * Output formatters
 * Provides different formatters for CLI output
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HumanFormatter = exports.MinimalFormatter = exports.TableFormatter = exports.JsonFormatter = void 0;
exports.createFormatter = createFormatter;
exports.formatOutput = formatOutput;
/**
 * JSON formatter - outputs data as formatted JSON
 */
class JsonFormatter {
    format(data) {
        return JSON.stringify(data, null, 2);
    }
}
exports.JsonFormatter = JsonFormatter;
/**
 * Table formatter - outputs data as a table
 * Currently a stub implementation - will be enhanced later
 */
class TableFormatter {
    format(data) {
        if (data.length === 0) {
            return 'No data to display';
        }
        // Simple table formatting using console.table
        // This is a placeholder - will be replaced with a proper table formatter
        return `${data.length} items\n`;
    }
}
exports.TableFormatter = TableFormatter;
/**
 * Minimal formatter - outputs only essential information
 * Useful for scripting or when only IDs are needed
 */
class MinimalFormatter {
    format(data) {
        if (Array.isArray(data)) {
            return this.formatArray(data);
        }
        if (typeof data === 'object' && data !== null) {
            return this.formatObject(data);
        }
        return String(data);
    }
    formatArray(data) {
        return data.map(item => {
            if (typeof item === 'object' && item !== null) {
                // For objects, try to get id or name
                if ('id' in item)
                    return String(item.id);
                if ('number' in item)
                    return String(item.number);
                if ('name' in item)
                    return String(item.name);
                // If no identifiable property, return empty string
                return '';
            }
            return String(item);
        }).join('\n');
    }
    formatObject(data) {
        // For objects, try to get id or name
        if ('id' in data)
            return String(data.id);
        if ('number' in data)
            return String(data.number);
        if ('name' in data)
            return String(data.name);
        // If no identifiable property, return empty string
        return '';
    }
}
exports.MinimalFormatter = MinimalFormatter;
/**
 * Human-readable formatter - outputs data in a human-friendly format
 * This is the default formatter
 */
class HumanFormatter {
    format(data) {
        if (Array.isArray(data)) {
            return this.formatArray(data);
        }
        if (typeof data === 'object' && data !== null) {
            return this.formatObject(data);
        }
        return String(data);
    }
    formatArray(data) {
        if (data.length === 0) {
            return 'No items found';
        }
        return data.map(item => this.formatObject(item)).join('\n\n');
    }
    formatObject(data) {
        if (!data)
            return 'No data';
        // For GitHub issues, format nicely
        if ('title' in data && 'number' in data) {
            let result = `#${data.number} ${data.title}`;
            if (data.state) {
                result += ` [${data.state}]`;
            }
            if (data.body) {
                result += `\n\n${data.body}`;
            }
            return result;
        }
        // Default formatting for other object types
        return Object.entries(data)
            .filter(([_, value]) => value !== undefined && value !== null)
            .map(([key, value]) => {
            if (typeof value === 'object' && !Array.isArray(value)) {
                return `${key}:\n  ${JSON.stringify(value, null, 2).replace(/\n/g, '\n  ')}`;
            }
            return `${key}: ${value}`;
        })
            .join('\n');
    }
}
exports.HumanFormatter = HumanFormatter;
/**
 * Create a formatter based on the specified format type
 */
function createFormatter(type = 'human') {
    switch (type) {
        case 'json':
            return new JsonFormatter();
        case 'table':
            return new TableFormatter();
        case 'minimal':
            return new MinimalFormatter();
        case 'human':
        default:
            return new HumanFormatter();
    }
}
/**
 * Format data according to the specified format type
 */
function formatOutput(data, type = 'human') {
    const formatter = createFormatter(type);
    return formatter.format(data);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,