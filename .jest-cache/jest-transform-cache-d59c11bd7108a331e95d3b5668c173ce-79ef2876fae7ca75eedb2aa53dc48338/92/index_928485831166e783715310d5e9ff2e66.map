{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/formatters/index.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/formatters/index.ts"],"sourcesContent":["/**\n * Output formatters\n * Provides different formatters for CLI output\n */\n\n/**\n * Format types supported by the formatter\n */\nexport type FormatType = 'json' | 'table' | 'minimal' | 'human';\n\n/**\n * Base formatter interface\n */\nexport interface Formatter<T> {\n  format(data: T): string;\n}\n\n/**\n * JSON formatter - outputs data as formatted JSON\n */\nexport class JsonFormatter<T> implements Formatter<T> {\n  format(data: T): string {\n    return JSON.stringify(data, null, 2);\n  }\n}\n\n/**\n * Table formatter - outputs data as a table\n * Currently a stub implementation - will be enhanced later\n */\nexport class TableFormatter<T extends object[]> implements Formatter<T> {\n  format(data: T): string {\n    if (data.length === 0) {\n      return 'No data to display';\n    }\n    \n    // Simple table formatting using console.table\n    // This is a placeholder - will be replaced with a proper table formatter\n    return `${data.length} items\\n`;\n  }\n}\n\n/**\n * Minimal formatter - outputs only essential information\n * Useful for scripting or when only IDs are needed\n */\nexport class MinimalFormatter<T> implements Formatter<T> {\n  format(data: T): string {\n    if (Array.isArray(data)) {\n      return this.formatArray(data);\n    }\n    \n    if (typeof data === 'object' && data !== null) {\n      return this.formatObject(data as Record<string, any>);\n    }\n    \n    return String(data);\n  }\n  \n  private formatArray(data: any[]): string {\n    return data.map(item => {\n      if (typeof item === 'object' && item !== null) {\n        // For objects, try to get id or name\n        if ('id' in item) return String(item.id);\n        if ('number' in item) return String(item.number);\n        if ('name' in item) return String(item.name);\n        // If no identifiable property, return empty string\n        return '';\n      }\n      return String(item);\n    }).join('\\n');\n  }\n  \n  private formatObject(data: Record<string, any>): string {\n    // For objects, try to get id or name\n    if ('id' in data) return String(data.id);\n    if ('number' in data) return String(data.number);\n    if ('name' in data) return String(data.name);\n    \n    // If no identifiable property, return empty string\n    return '';\n  }\n}\n\n/**\n * Human-readable formatter - outputs data in a human-friendly format\n * This is the default formatter\n */\nexport class HumanFormatter<T> implements Formatter<T> {\n  format(data: T): string {\n    if (Array.isArray(data)) {\n      return this.formatArray(data);\n    }\n    \n    if (typeof data === 'object' && data !== null) {\n      return this.formatObject(data as Record<string, any>);\n    }\n    \n    return String(data);\n  }\n  \n  private formatArray(data: any[]): string {\n    if (data.length === 0) {\n      return 'No items found';\n    }\n    \n    return data.map(item => this.formatObject(item)).join('\\n\\n');\n  }\n  \n  private formatObject(data: Record<string, any>): string {\n    if (!data) return 'No data';\n    \n    // For GitHub issues, format nicely\n    if ('title' in data && 'number' in data) {\n      let result = `#${data.number} ${data.title}`;\n      \n      if (data.state) {\n        result += ` [${data.state}]`;\n      }\n      \n      if (data.body) {\n        result += `\\n\\n${data.body}`;\n      }\n      \n      return result;\n    }\n    \n    // Default formatting for other object types\n    return Object.entries(data)\n      .filter(([_, value]) => value !== undefined && value !== null)\n      .map(([key, value]) => {\n        if (typeof value === 'object' && !Array.isArray(value)) {\n          return `${key}:\\n  ${JSON.stringify(value, null, 2).replace(/\\n/g, '\\n  ')}`;\n        }\n        return `${key}: ${value}`;\n      })\n      .join('\\n');\n  }\n}\n\n/**\n * Create a formatter based on the specified format type\n */\nexport function createFormatter<T>(type: FormatType = 'human'): Formatter<T> {\n  switch (type) {\n    case 'json':\n      return new JsonFormatter<T>();\n    case 'table':\n      return new TableFormatter<T extends object[] ? T : never>() as unknown as Formatter<T>;\n    case 'minimal':\n      return new MinimalFormatter<T>();\n    case 'human':\n    default:\n      return new HumanFormatter<T>();\n  }\n}\n\n/**\n * Format data according to the specified format type\n */\nexport function formatOutput<T>(data: T, type: FormatType = 'human'): string {\n  const formatter = createFormatter<T>(type);\n  return formatter.format(data);\n} "],"version":3}