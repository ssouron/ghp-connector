52dba99764d93d5045d645f4cf667928
"use strict";
/**
 * Tests for configuration module
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock fs module
jest.mock('fs');
jest.mock('path');
jest.mock('os');
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const index_1 = require("./index");
const test_utils_1 = require("../test-helpers/test-utils");
describe('Configuration Module', () => {
    // Cleanup temp files after each test
    const tempPaths = [];
    afterEach(() => {
        // Restore all mocks
        jest.restoreAllMocks();
        // Clean up temporary files
        (0, test_utils_1.cleanupTestFiles)(...tempPaths);
        tempPaths.length = 0;
    });
    describe('findConfigFile', () => {
        it('devrait trouver le fichier de configuration dans le répertoire courant', () => {
            // Mock fs.existsSync
            const mockExistsSync = jest.spyOn(fs_1.default, 'existsSync').mockImplementation((filePath) => {
                return filePath.toString().includes(index_1.CONFIG_FILENAME);
            });
            // Mock process.cwd and path.join
            jest.spyOn(process, 'cwd').mockReturnValue('/fake/current/dir');
            jest.spyOn(path_1.default, 'join').mockImplementation((...paths) => paths.join('/'));
            const configPath = (0, index_1.findConfigFile)();
            expect(configPath).toBe('/fake/current/dir/.ghprc.json');
            expect(mockExistsSync).toHaveBeenCalledWith('/fake/current/dir/.ghprc.json');
        });
        it('devrait trouver le fichier de configuration dans le répertoire home si absent du répertoire courant', () => {
            // Mock fs.existsSync to return false for current dir, true for home dir
            const mockExistsSync = jest.spyOn(fs_1.default, 'existsSync').mockImplementation((filePath) => {
                return filePath.toString().includes('home') && filePath.toString().includes(index_1.CONFIG_FILENAME);
            });
            // Mock process.cwd, os.homedir, and path.join
            jest.spyOn(process, 'cwd').mockReturnValue('/fake/current/dir');
            jest.spyOn(os_1.default, 'homedir').mockReturnValue('/fake/home/dir');
            jest.spyOn(path_1.default, 'join').mockImplementation((...paths) => paths.join('/'));
            const configPath = (0, index_1.findConfigFile)();
            expect(configPath).toBe('/fake/home/dir/.ghprc.json');
            expect(mockExistsSync).toHaveBeenCalledWith('/fake/current/dir/.ghprc.json');
            expect(mockExistsSync).toHaveBeenCalledWith('/fake/home/dir/.ghprc.json');
        });
        it('devrait retourner null si aucun fichier de configuration n\'est trouvé', () => {
            // Mock fs.existsSync to always return false
            jest.spyOn(fs_1.default, 'existsSync').mockReturnValue(false);
            // Mock process.cwd, os.homedir, and path.join
            jest.spyOn(process, 'cwd').mockReturnValue('/fake/current/dir');
            jest.spyOn(os_1.default, 'homedir').mockReturnValue('/fake/home/dir');
            jest.spyOn(path_1.default, 'join').mockImplementation((...paths) => paths.join('/'));
            const configPath = (0, index_1.findConfigFile)();
            expect(configPath).toBeNull();
        });
    });
    describe('loadConfigFile', () => {
        it('devrait charger et parser correctement un fichier de configuration JSON', () => {
            const testConfig = {
                github: {
                    owner: 'test-owner',
                    repo: 'test-repo'
                }
            };
            // Mock fs.readFileSync
            jest.spyOn(fs_1.default, 'readFileSync').mockReturnValue(JSON.stringify(testConfig));
            const config = (0, index_1.loadConfigFile)('/fake/path/.ghprc.json');
            expect(config).toEqual(testConfig);
        });
        it('devrait lancer une erreur si le fichier ne peut pas être lu', () => {
            // Mock fs.readFileSync to throw
            jest.spyOn(fs_1.default, 'readFileSync').mockImplementation(() => {
                throw new Error('File read error');
            });
            expect(() => {
                (0, index_1.loadConfigFile)('/fake/path/.ghprc.json');
            }).toThrow('Failed to load config file: File read error');
        });
        it('devrait lancer une erreur si le JSON est invalide', () => {
            // Mock fs.readFileSync to return invalid JSON
            jest.spyOn(fs_1.default, 'readFileSync').mockReturnValue('{ invalid: json }');
            expect(() => {
                (0, index_1.loadConfigFile)('/fake/path/.ghprc.json');
            }).toThrow('Failed to load config file:');
        });
    });
    describe('getEnvConfig', () => {
        it('devrait extraire la configuration depuis les variables d\'environnement', () => {
            // Mock environment variables
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_OWNER: 'env-owner',
                GITHUB_REPO: 'env-repo',
                GITHUB_TOKEN: 'env-token',
                GITHUB_API_URL: 'https://custom.github.api'
            });
            try {
                const config = (0, index_1.getEnvConfig)();
                expect(config).toEqual({
                    github: {
                        owner: 'env-owner',
                        repo: 'env-repo',
                        token: 'env-token',
                        baseUrl: 'https://custom.github.api'
                    }
                });
            }
            finally {
                restoreEnv();
            }
        });
        it('devrait retourner un objet vide si aucune variable d\'environnement pertinente n\'est définie', () => {
            // Mock environment variables (clear relevant ones)
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_OWNER: undefined,
                GITHUB_REPO: undefined,
                GITHUB_TOKEN: undefined,
                GITHUB_API_URL: undefined
            });
            try {
                const config = (0, index_1.getEnvConfig)();
                expect(config).toEqual({});
            }
            finally {
                restoreEnv();
            }
        });
        it('devrait inclure seulement les variables définies', () => {
            // Mock only some environment variables
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_OWNER: 'env-owner',
                GITHUB_REPO: undefined,
                GITHUB_TOKEN: 'env-token',
                GITHUB_API_URL: undefined
            });
            try {
                const config = (0, index_1.getEnvConfig)();
                expect(config).toEqual({
                    github: {
                        owner: 'env-owner',
                        token: 'env-token'
                    }
                });
            }
            finally {
                restoreEnv();
            }
        });
    });
    describe('mergeConfigs', () => {
        it('devrait fusionner les configurations avec la priorité correcte', () => {
            const fileConfig = {
                github: {
                    owner: 'file-owner',
                    repo: 'file-repo',
                    baseUrl: 'https://file.github.api'
                },
                defaults: {
                    format: 'json',
                    issues: {
                        state: 'all'
                    },
                    projects: {}
                }
            };
            const envConfig = {
                github: {
                    owner: 'env-owner',
                    repo: 'file-repo', // Needs both owner and repo
                    token: 'env-token'
                }
            };
            const cmdConfig = {
                github: {
                    owner: 'file-owner', // Needs both owner and repo
                    repo: 'cmd-repo'
                },
                defaults: {
                    format: 'table',
                    issues: {
                        state: 'open'
                    },
                    projects: {}
                }
            };
            const mergedConfig = (0, index_1.mergeConfigs)(cmdConfig, envConfig, fileConfig);
            // Check priorities: cmd > env > file > default
            expect(mergedConfig.github.owner).toBe('env-owner'); // From env
            expect(mergedConfig.github.repo).toBe('cmd-repo'); // From cmd
            expect(mergedConfig.github.token).toBe('env-token'); // From env
            expect(mergedConfig.github.baseUrl).toBe('https://file.github.api'); // From file
            expect(mergedConfig.defaults.format).toBe('table'); // From cmd
            expect(mergedConfig.defaults.issues.state).toBe('all'); // From file
            expect(mergedConfig.defaults.issues.limit).toBe(10); // From default
        });
        it('devrait utiliser les valeurs par défaut lorsqu\'aucune autre configuration n\'est fournie', () => {
            const mergedConfig = (0, index_1.mergeConfigs)({}, {}, {});
            expect(mergedConfig).toEqual((0, index_1.getDefaultConfig)());
        });
        it('devrait gérer correctement les configurations partielles', () => {
            const fileConfig = {
                github: {
                    owner: 'file-owner',
                    repo: '', // Add empty repo to satisfy type
                }
            };
            const mergedConfig = (0, index_1.mergeConfigs)({}, {}, fileConfig);
            const defaultConfig = (0, index_1.getDefaultConfig)();
            expect(mergedConfig.github.owner).toBe('file-owner');
            expect(mergedConfig.github.repo).toBe('');
            expect(mergedConfig.github.baseUrl).toBe('https://api.github.com');
            expect(mergedConfig.defaults).toEqual(defaultConfig.defaults);
        });
    });
    describe('cmdArgsToConfig', () => {
        it('devrait convertir les options de commande en structure de configuration', () => {
            const options = {
                owner: 'cmd-owner',
                repo: 'cmd-repo',
                format: 'json'
            };
            const config = (0, index_1.cmdArgsToConfig)(options);
            expect(config).toEqual({
                github: {
                    owner: 'cmd-owner',
                    repo: 'cmd-repo'
                },
                defaults: {
                    format: 'json'
                }
            });
        });
        it('devrait gérer les options partielles', () => {
            const options = {
                owner: 'cmd-owner'
            };
            const config = (0, index_1.cmdArgsToConfig)(options);
            expect(config).toEqual({
                github: {
                    owner: 'cmd-owner'
                }
            });
        });
        it('devrait retourner un objet vide si aucune option pertinente n\'est fournie', () => {
            const options = {
                irrelevant: 'value'
            };
            const config = (0, index_1.cmdArgsToConfig)(options);
            expect(config).toEqual({});
        });
    });
    describe('loadConfig', () => {
        it('devrait charger la configuration depuis toutes les sources', () => {
            // Prepare mocks
            const mockFileConfig = {
                github: {
                    owner: 'file-owner',
                    repo: 'file-repo'
                }
            };
            // Mock findConfigFile and loadConfigFile
            jest.spyOn(fs_1.default, 'existsSync').mockReturnValue(true);
            jest.spyOn(process, 'cwd').mockReturnValue('/fake/current/dir');
            jest.spyOn(path_1.default, 'join').mockImplementation((...paths) => paths.join('/'));
            jest.spyOn(fs_1.default, 'readFileSync').mockReturnValue(JSON.stringify(mockFileConfig));
            // Mock env
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_TOKEN: 'env-token'
            });
            try {
                const cmdArgs = {
                    defaults: {
                        format: 'table',
                        issues: {
                            state: 'open'
                        },
                        projects: {}
                    }
                };
                const config = (0, index_1.loadConfig)(cmdArgs);
                expect(config.github.owner).toBe('file-owner');
                expect(config.github.repo).toBe('file-repo');
                expect(config.github.token).toBe('env-token');
                expect(config.defaults.format).toBe('table');
            }
            finally {
                restoreEnv();
            }
        });
        it('devrait gérer l\'absence de fichier de configuration', () => {
            // Mock findConfigFile to return null
            jest.spyOn(fs_1.default, 'existsSync').mockReturnValue(false);
            // Mock env
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_OWNER: 'env-owner',
                GITHUB_REPO: 'env-repo'
            });
            try {
                const config = (0, index_1.loadConfig)();
                expect(config.github.owner).toBe('env-owner');
                expect(config.github.repo).toBe('env-repo');
            }
            finally {
                restoreEnv();
            }
        });
        it('devrait gérer les erreurs lors du chargement du fichier de configuration', () => {
            // Mock findConfigFile and loadConfigFile
            jest.spyOn(fs_1.default, 'existsSync').mockReturnValue(true);
            jest.spyOn(process, 'cwd').mockReturnValue('/fake/current/dir');
            jest.spyOn(path_1.default, 'join').mockImplementation((...paths) => paths.join('/'));
            jest.spyOn(fs_1.default, 'readFileSync').mockImplementation(() => {
                throw new Error('File error');
            });
            // Mock console.error
            const mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
            const config = (0, index_1.loadConfig)();
            expect(mockConsoleError).toHaveBeenCalled();
            expect(config).toEqual((0, index_1.getDefaultConfig)());
        });
    });
    describe('initConfigFile', () => {
        it('devrait créer un nouveau fichier de configuration avec les paramètres par défaut', () => {
            // Mock fs.writeFileSync
            const mockWriteFileSync = jest.spyOn(fs_1.default, 'writeFileSync').mockImplementation();
            (0, index_1.initConfigFile)('/fake/path/.ghprc.json');
            expect(mockWriteFileSync).toHaveBeenCalledWith('/fake/path/.ghprc.json', expect.any(String), 'utf-8');
            // Check content contains JSON
            const content = mockWriteFileSync.mock.calls[0][1];
            const parsedContent = JSON.parse(content);
            expect(parsedContent).toEqual((0, index_1.getDefaultConfig)());
        });
        it('devrait lancer une erreur si le fichier ne peut pas être créé', () => {
            // Mock fs.writeFileSync to throw
            jest.spyOn(fs_1.default, 'writeFileSync').mockImplementation(() => {
                throw new Error('File write error');
            });
            expect(() => {
                (0, index_1.initConfigFile)('/fake/path/.ghprc.json');
            }).toThrow('Failed to create config file: File write error');
        });
    });
    describe('validateConfig', () => {
        it('devrait valider une configuration complète et correcte', () => {
            const config = {
                github: {
                    owner: 'valid-owner',
                    repo: 'valid-repo'
                },
                defaults: {
                    format: 'human',
                    issues: {
                        state: 'open'
                    },
                    projects: {}
                }
            };
            expect((0, index_1.validateConfig)(config)).toBe(true);
        });
        it('devrait lancer une erreur si owner est manquant', () => {
            const config = {
                github: {
                    repo: 'valid-repo'
                }
            };
            expect(() => (0, index_1.validateConfig)(config)).toThrow('owner is required');
        });
        it('devrait lancer une erreur si repo est manquant', () => {
            const config = {
                github: {
                    owner: 'valid-owner'
                }
            };
            expect(() => (0, index_1.validateConfig)(config)).toThrow('repo is required');
        });
        it('devrait lancer une erreur si format est invalide', () => {
            const config = {
                github: {
                    owner: 'valid-owner',
                    repo: 'valid-repo'
                },
                defaults: {
                    format: 'invalid-format',
                    issues: {
                        state: 'open'
                    },
                    projects: {}
                }
            };
            expect(() => (0, index_1.validateConfig)(config)).toThrow('Invalid format');
        });
    });
    // Tests d'intégration (avec le système de fichiers réel)
    describe('Integration tests with real file system', () => {
        // Restaurer les mocks pour ces tests
        beforeEach(() => {
            jest.restoreAllMocks();
        });
        it('devrait trouver et charger un fichier de configuration réel', () => {
            // Créer un fichier de configuration temporaire
            const testConfig = {
                github: {
                    owner: 'test-integration-owner',
                    repo: 'test-integration-repo'
                }
            };
            const tempDir = (0, test_utils_1.createTempTestDir)();
            tempPaths.push(tempDir);
            const configPath = (0, test_utils_1.createTempConfigFile)(testConfig, tempDir);
            // Mock process.cwd to return our temp directory
            jest.spyOn(process, 'cwd').mockReturnValue(tempDir);
            // Test findConfigFile and loadConfigFile with real files
            const foundPath = (0, index_1.findConfigFile)();
            expect(foundPath).toBe(configPath);
            const loadedConfig = (0, index_1.loadConfigFile)(foundPath);
            expect(loadedConfig).toEqual(testConfig);
        });
        it('devrait créer un fichier de configuration réel', () => {
            const tempDir = (0, test_utils_1.createTempTestDir)();
            tempPaths.push(tempDir);
            const configPath = path_1.default.join(tempDir, index_1.CONFIG_FILENAME);
            // Create the file
            (0, index_1.initConfigFile)(configPath);
            // Verify file exists
            expect(fs_1.default.existsSync(configPath)).toBe(true);
            // Verify content
            const content = fs_1.default.readFileSync(configPath, 'utf-8');
            const parsedContent = JSON.parse(content);
            expect(parsedContent).toEqual((0, index_1.getDefaultConfig)());
        });
        it('devrait charger et fusionner correctement des configurations depuis plusieurs sources', () => {
            // Create a config file
            const fileConfig = {
                github: {
                    owner: 'file-owner',
                    repo: 'file-repo'
                }
            };
            const tempDir = (0, test_utils_1.createTempTestDir)();
            tempPaths.push(tempDir);
            (0, test_utils_1.createTempConfigFile)(fileConfig, tempDir);
            // Mock process.cwd and env vars
            jest.spyOn(process, 'cwd').mockReturnValue(tempDir);
            const restoreEnv = (0, test_utils_1.mockEnv)({
                GITHUB_TOKEN: 'env-token'
            });
            try {
                // Command line args
                const cmdArgs = {
                    defaults: {
                        format: 'table',
                        issues: {
                            state: 'open'
                        },
                        projects: {}
                    }
                };
                // Load full config
                const config = (0, index_1.loadConfig)(cmdArgs);
                // Verify merging works correctly
                expect(config.github.owner).toBe('file-owner');
                expect(config.github.repo).toBe('file-repo');
                expect(config.github.token).toBe('env-token');
                expect(config.defaults.format).toBe('table');
            }
            finally {
                restoreEnv();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,