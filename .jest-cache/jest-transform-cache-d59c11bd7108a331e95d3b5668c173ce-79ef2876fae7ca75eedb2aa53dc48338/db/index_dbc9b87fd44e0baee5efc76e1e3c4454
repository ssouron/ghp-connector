8ad52a3280d29b57a20d4354947e0fcb
"use strict";
/**
 * Error handling utilities
 * Provides custom error classes and error handling functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationError = exports.GitHubAPIError = exports.NotFoundError = exports.AuthenticationError = exports.NetworkError = exports.ValidationError = exports.GHPError = exports.ExitCode = void 0;
exports.handleError = handleError;
exports.wrapWithErrorHandler = wrapWithErrorHandler;
/**
 * Standard error exit codes
 */
var ExitCode;
(function (ExitCode) {
    ExitCode[ExitCode["Success"] = 0] = "Success";
    ExitCode[ExitCode["GeneralError"] = 1] = "GeneralError";
    ExitCode[ExitCode["ValidationError"] = 2] = "ValidationError";
    ExitCode[ExitCode["NetworkError"] = 3] = "NetworkError";
    ExitCode[ExitCode["AuthenticationError"] = 4] = "AuthenticationError";
    ExitCode[ExitCode["NotFoundError"] = 5] = "NotFoundError";
    ExitCode[ExitCode["GitHubAPIError"] = 6] = "GitHubAPIError";
    ExitCode[ExitCode["ConfigurationError"] = 7] = "ConfigurationError";
})(ExitCode || (exports.ExitCode = ExitCode = {}));
/**
 * Base error class for GHP Connector
 */
class GHPError extends Error {
    constructor(message, exitCode = ExitCode.GeneralError) {
        super(message);
        this.name = this.constructor.name;
        this.exitCode = exitCode;
    }
}
exports.GHPError = GHPError;
/**
 * Error thrown when input validation fails
 */
class ValidationError extends GHPError {
    constructor(message) {
        super(message, ExitCode.ValidationError);
    }
}
exports.ValidationError = ValidationError;
/**
 * Error thrown when a network error occurs
 */
class NetworkError extends GHPError {
    constructor(message) {
        super(message, ExitCode.NetworkError);
    }
}
exports.NetworkError = NetworkError;
/**
 * Error thrown when authentication fails
 */
class AuthenticationError extends GHPError {
    constructor(message) {
        super(message, ExitCode.AuthenticationError);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Error thrown when a resource is not found
 */
class NotFoundError extends GHPError {
    constructor(message) {
        super(message, ExitCode.NotFoundError);
    }
}
exports.NotFoundError = NotFoundError;
/**
 * Error thrown when a GitHub API error occurs
 */
class GitHubAPIError extends GHPError {
    constructor(message, response) {
        super(message, ExitCode.GitHubAPIError);
        this.response = response;
    }
}
exports.GitHubAPIError = GitHubAPIError;
/**
 * Error thrown when there's a configuration error
 */
class ConfigurationError extends GHPError {
    constructor(message) {
        super(message, ExitCode.ConfigurationError);
    }
}
exports.ConfigurationError = ConfigurationError;
/**
 * Handle errors and provide user-friendly messages
 */
function handleError(error, verbose = false) {
    // Determine if it's a known error type
    const isGHPError = error instanceof GHPError;
    // Get the exit code
    const exitCode = isGHPError ? error.exitCode : ExitCode.GeneralError;
    // Format the error message
    let message;
    if (error instanceof GitHubAPIError && error.response) {
        if (verbose) {
            message = `GitHub API Error: ${error.message}\nResponse: ${JSON.stringify(error.response, null, 2)}`;
        }
        else {
            message = `GitHub API Error: ${error.message}`;
        }
    }
    else if (error.message) {
        message = error.message;
    }
    else {
        message = String(error);
    }
    // Print error message
    console.error(`Error: ${message}`);
    // In verbose mode, print stack trace for debugging
    if (verbose && error.stack) {
        console.error('\nStack trace:');
        console.error(error.stack);
    }
    // Exit process with appropriate code
    process.exit(exitCode);
}
/**
 * Wrap a function to handle errors
 */
function wrapWithErrorHandler(fn, verbose = false) {
    return async (...args) => {
        try {
            return await fn(...args);
        }
        catch (error) {
            handleError(error, verbose);
            // This line is never reached, but TypeScript needs a return statement
            throw error;
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3N0ZXBoYW5lc291cm9uL2Rldi9iZWRkeS1ieWUtc3Rvcmllcy9naHAtY29ubmVjdG9yL3NyYy9saWIvZXJyb3JzL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQXlGSCxrQ0FpQ0M7QUFLRCxvREFhQztBQTFJRDs7R0FFRztBQUNILElBQVksUUFTWDtBQVRELFdBQVksUUFBUTtJQUNsQiw2Q0FBVyxDQUFBO0lBQ1gsdURBQWdCLENBQUE7SUFDaEIsNkRBQW1CLENBQUE7SUFDbkIsdURBQWdCLENBQUE7SUFDaEIscUVBQXVCLENBQUE7SUFDdkIseURBQWlCLENBQUE7SUFDakIsMkRBQWtCLENBQUE7SUFDbEIsbUVBQXNCLENBQUE7QUFDeEIsQ0FBQyxFQVRXLFFBQVEsd0JBQVIsUUFBUSxRQVNuQjtBQUVEOztHQUVHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsS0FBSztJQUdqQyxZQUFZLE9BQWUsRUFBRSxXQUFxQixRQUFRLENBQUMsWUFBWTtRQUNyRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQVJELDRCQVFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGVBQWdCLFNBQVEsUUFBUTtJQUMzQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBSkQsMENBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLFFBQVE7SUFDeEMsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQUpELG9DQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLG1CQUFvQixTQUFRLFFBQVE7SUFDL0MsWUFB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IiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVwaGFuZXNvdXJvbi9kZXYvYmVkZHktYnllLXN0b3JpZXMvZ2hwLWNvbm5lY3Rvci9zcmMvbGliL2Vycm9ycy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9yIGhhbmRsaW5nIHV0aWxpdGllc1xuICogUHJvdmlkZXMgY3VzdG9tIGVycm9yIGNsYXNzZXMgYW5kIGVycm9yIGhhbmRsaW5nIGZ1bmN0aW9uc1xuICovXG5cbi8qKlxuICogU3RhbmRhcmQgZXJyb3IgZXhpdCBjb2Rlc1xuICovXG5leHBvcnQgZW51bSBFeGl0Q29kZSB7XG4gIFN1Y2Nlc3MgPSAwLFxuICBHZW5lcmFsRXJyb3IgPSAxLFxuICBWYWxpZGF0aW9uRXJyb3IgPSAyLFxuICBOZXR3b3JrRXJyb3IgPSAzLFxuICBBdXRoZW50aWNhdGlvbkVycm9yID0gNCxcbiAgTm90Rm91bmRFcnJvciA9IDUsXG4gIEdpdEh1YkFQSUVycm9yID0gNixcbiAgQ29uZmlndXJhdGlvbkVycm9yID0gNyxcbn1cblxuLyoqXG4gKiBCYXNlIGVycm9yIGNsYXNzIGZvciBHSFAgQ29ubmVjdG9yXG4gKi9cbmV4cG9ydCBjbGFzcyBHSFBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgZXhpdENvZGU6IEV4aXRDb2RlO1xuICBcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBleGl0Q29kZTogRXhpdENvZGUgPSBFeGl0Q29kZS5HZW5lcmFsRXJyb3IpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgdGhpcy5leGl0Q29kZSA9IGV4aXRDb2RlO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gaW5wdXQgdmFsaWRhdGlvbiBmYWlsc1xuICovXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgR0hQRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBFeGl0Q29kZS5WYWxpZGF0aW9uRXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSBuZXR3b3JrIGVycm9yIG9jY3Vyc1xuICovXG5leHBvcnQgY2xhc3MgTmV0d29ya0Vycm9yIGV4dGVuZHMgR0hQRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBFeGl0Q29kZS5OZXR3b3JrRXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYXV0aGVudGljYXRpb24gZmFpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBHSFBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIEV4aXRDb2RlLkF1dGhlbnRpY2F0aW9uRXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSByZXNvdXJjZSBpcyBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBHSFBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIEV4aXRDb2RlLk5vdEZvdW5kRXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSBHaXRIdWIgQVBJIGVycm9yIG9jY3Vyc1xuICovXG5leHBvcnQgY2xhc3MgR2l0SHViQVBJRXJyb3IgZXh0ZW5kcyBHSFBFcnJvciB7XG4gIHJlc3BvbnNlPzogYW55O1xuICBcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCByZXNwb25zZT86IGFueSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIEV4aXRDb2RlLkdpdEh1YkFQSUVycm9yKTtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGVyZSdzIGEgY29uZmlndXJhdGlvbiBlcnJvclxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgR0hQRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBFeGl0Q29kZS5Db25maWd1cmF0aW9uRXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGVycm9ycyBhbmQgcHJvdmlkZSB1c2VyLWZyaWVuZGx5IG1lc3NhZ2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcjogYW55LCB2ZXJib3NlID0gZmFsc2UpOiB2b2lkIHtcbiAgLy8gRGV0ZXJtaW5lIGlmIGl0J3MgYSBrbm93biBlcnJvciB0eXBlXG4gIGNvbnN0IGlzR0hQRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIEdIUEVycm9yO1xuICBcbiAgLy8gR2V0IHRoZSBleGl0IGNvZGVcbiAgY29uc3QgZXhpdENvZGUgPSBpc0dIUEVycm9yID8gZXJyb3IuZXhpdENvZGUgOiBFeGl0Q29kZS5HZW5lcmFsRXJyb3I7XG4gIFxuICAvLyBGb3JtYXQgdGhlIGVycm9yIG1lc3NhZ2VcbiAgbGV0IG1lc3NhZ2U6IHN0cmluZztcbiAgXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEdpdEh1YkFQSUVycm9yICYmIGVycm9yLnJlc3BvbnNlKSB7XG4gICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgIG1lc3NhZ2UgPSBgR2l0SHViIEFQSSBFcnJvcjogJHtlcnJvci5tZXNzYWdlfVxcblJlc3BvbnNlOiAke0pTT04uc3RyaW5naWZ5KGVycm9yLnJlc3BvbnNlLCBudWxsLCAyKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gYEdpdEh1YiBBUEkgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSA9IFN0cmluZyhlcnJvcik7XG4gIH1cbiAgXG4gIC8vIFByaW50IGVycm9yIG1lc3NhZ2VcbiAgY29uc29sZS5lcnJvcihgRXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgXG4gIC8vIEluIHZlcmJvc2UgbW9kZSwgcHJpbnQgc3RhY2sgdHJhY2UgZm9yIGRlYnVnZ2luZ1xuICBpZiAodmVyYm9zZSAmJiBlcnJvci5zdGFjaykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1xcblN0YWNrIHRyYWNlOicpO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICB9XG4gIFxuICAvLyBFeGl0IHByb2Nlc3Mgd2l0aCBhcHByb3ByaWF0ZSBjb2RlXG4gIHByb2Nlc3MuZXhpdChleGl0Q29kZSk7XG59XG5cbi8qKlxuICogV3JhcCBhIGZ1bmN0aW9uIHRvIGhhbmRsZSBlcnJvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBXaXRoRXJyb3JIYW5kbGVyPFQgZXh0ZW5kcyBhbnlbXSwgUj4oXG4gIGZuOiAoLi4uYXJnczogVCkgPT4gUHJvbWlzZTxSPixcbiAgdmVyYm9zZSA9IGZhbHNlXG4pOiAoLi4uYXJnczogVCkgPT4gUHJvbWlzZTxSPiB7XG4gIHJldHVybiBhc3luYyAoLi4uYXJnczogVCk6IFByb21pc2U8Uj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZm4oLi4uYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2ZXJib3NlKTtcbiAgICAgIC8vIFRoaXMgbGluZSBpcyBuZXZlciByZWFjaGVkLCBidXQgVHlwZVNjcmlwdCBuZWVkcyBhIHJldHVybiBzdGF0ZW1lbnRcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbn0gIl0sInZlcnNpb24iOjN9