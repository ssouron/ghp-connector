9a34c9bedc9d1706d67ff175f4045979
"use strict";
/**
 * Mocks pour l'API GitHub (Octokit)
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockOctokit = mockOctokit;
exports.mockGitHubClient = mockGitHubClient;
const mock_github_1 = require("../mock-github");
const jest_mock_extended_1 = require("jest-mock-extended");
/**
 * Crée un mock pour Octokit
 */
function mockOctokit(options = {}) {
    const { defaultIssueCount = 5, customResponses = {} } = options;
    // Créer une implémentation partielle de Octokit avec les méthodes mockeés
    const octokitMock = {
        rest: {
            repos: {
                get: jest.fn().mockImplementation(async () => ({
                    data: {
                        id: 123456,
                        name: 'test-repo',
                        full_name: 'test-owner/test-repo',
                        private: false,
                        owner: {
                            login: 'test-owner',
                            id: 12345,
                            type: 'User'
                        },
                        html_url: 'https://github.com/test-owner/test-repo',
                        description: 'A test repository for unit tests',
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString(),
                        ...customResponses.repo
                    },
                    status: 200,
                    headers: {},
                    url: 'https://api.github.com/repos/test-owner/test-repo'
                }))
            },
            issues: {
                listForRepo: jest.fn().mockImplementation(async () => ({
                    data: customResponses.issues?.list || (0, mock_github_1.createMockIssueList)(defaultIssueCount),
                    status: 200,
                    headers: {},
                    url: 'https://api.github.com/repos/test-owner/test-repo/issues'
                })),
                get: jest.fn().mockImplementation(async ({ issue_number }) => ({
                    data: customResponses.issues?.get?.[issue_number] || (0, mock_github_1.createMockIssue)(issue_number, `Issue ${issue_number}`),
                    status: 200,
                    headers: {},
                    url: `https://api.github.com/repos/test-owner/test-repo/issues/${issue_number}`
                })),
                create: jest.fn().mockImplementation(async ({ title, body, ...options }) => ({
                    data: (0, mock_github_1.createMockIssue)(Date.now(), title, { body, ...options }),
                    status: 201,
                    headers: {},
                    url: 'https://api.github.com/repos/test-owner/test-repo/issues'
                })),
                update: jest.fn().mockImplementation(async ({ issue_number, ...updates }) => ({
                    data: (0, mock_github_1.createMockIssue)(issue_number, `Updated Issue ${issue_number}`, updates),
                    status: 200,
                    headers: {},
                    url: `https://api.github.com/repos/test-owner/test-repo/issues/${issue_number}`
                }))
            }
        },
        graphql: jest.fn().mockImplementation(async (query, variables) => {
            // Si une réponse personnalisée est fournie pour cette requête, l'utiliser
            const queryKey = query.replace(/\s+/g, ' ').trim();
            if (customResponses.graphql?.[queryKey]) {
                return customResponses.graphql[queryKey](variables);
            }
            // Réponse par défaut
            return {
                repository: {
                    id: 'R_123456',
                    name: 'test-repo',
                    owner: { login: 'test-owner' },
                    issues: {
                        nodes: (0, mock_github_1.createMockIssueList)(3)
                    }
                }
            };
        })
    };
    return octokitMock;
}
/**
 * Crée un mock pour GitHubClient
 */
function mockGitHubClient(options = {}) {
    const clientMock = (0, jest_mock_extended_1.mock)();
    const mockIssueList = options.customResponses?.issues?.list || (0, mock_github_1.createMockIssueList)(options.defaultIssueCount || 5);
    // Mock pour getRepository
    clientMock.getRepository.mockResolvedValue({
        id: 123456,
        name: 'test-repo',
        full_name: 'test-owner/test-repo',
        private: false,
        owner: {
            login: 'test-owner',
            id: 12345,
            type: 'User'
        },
        html_url: 'https://github.com/test-owner/test-repo',
        description: 'A test repository for unit tests',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ...options.customResponses?.repo
    });
    // Mock pour listIssues
    clientMock.listIssues.mockResolvedValue(mockIssueList);
    // Mock pour getIssue
    clientMock.getIssue.mockImplementation(async (issueNumber) => {
        const customIssue = options.customResponses?.issues?.get?.[issueNumber];
        if (customIssue)
            return customIssue;
        const issue = mockIssueList.find((i) => i.number === issueNumber);
        if (issue)
            return issue;
        return (0, mock_github_1.createMockIssue)(issueNumber, `Issue ${issueNumber}`);
    });
    // Mock pour createIssue
    clientMock.createIssue.mockImplementation(async (title, body, opts) => (0, mock_github_1.createMockIssue)(Date.now(), title, { body, ...opts }));
    // Mock pour updateIssue
    clientMock.updateIssue.mockImplementation(async (issueNumber, updates) => (0, mock_github_1.createMockIssue)(issueNumber, `Updated Issue ${issueNumber}`, updates));
    // Mock pour graphql
    clientMock.graphql.mockImplementation(async (query, variables) => {
        // Si une réponse personnalisée est fournie pour cette requête, l'utiliser
        const queryKey = query.replace(/\s+/g, ' ').trim();
        if (options.customResponses?.graphql?.[queryKey]) {
            return options.customResponses.graphql[queryKey](variables);
        }
        // Réponse par défaut
        return {
            repository: {
                id: 'R_123456',
                name: 'test-repo',
                owner: { login: 'test-owner' },
                issues: {
                    nodes: (0, mock_github_1.createMockIssueList)(3)
                }
            }
        };
    });
    return clientMock;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,