{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/octokit-mock.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks/octokit-mock.ts"],"sourcesContent":["/**\n * Mocks pour l'API GitHub (Octokit)\n */\n\nimport { Octokit } from 'octokit';\nimport { GitHubClient } from '../../github/client';\nimport { createMockIssue, createMockIssueList, MockIssueOptions } from '../mock-github';\nimport { mock, MockProxy } from 'jest-mock-extended';\n\n/**\n * Options pour le mock Octokit\n */\nexport interface OctokitMockOptions {\n  /** Nombre d'issues à créer par défaut */\n  defaultIssueCount?: number;\n  /** Réponses personnalisées pour les requêtes */\n  customResponses?: Record<string, any>;\n}\n\n/**\n * Crée un mock pour Octokit\n */\nexport function mockOctokit(options: OctokitMockOptions = {}) {\n  const { defaultIssueCount = 5, customResponses = {} } = options;\n  \n  // Créer une implémentation partielle de Octokit avec les méthodes mockeés\n  const octokitMock = {\n    rest: {\n      repos: {\n        get: jest.fn().mockImplementation(async () => ({\n          data: {\n            id: 123456,\n            name: 'test-repo',\n            full_name: 'test-owner/test-repo',\n            private: false,\n            owner: {\n              login: 'test-owner',\n              id: 12345,\n              type: 'User'\n            },\n            html_url: 'https://github.com/test-owner/test-repo',\n            description: 'A test repository for unit tests',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            ...customResponses.repo\n          },\n          status: 200,\n          headers: {},\n          url: 'https://api.github.com/repos/test-owner/test-repo'\n        }))\n      },\n      issues: {\n        listForRepo: jest.fn().mockImplementation(async () => ({\n          data: customResponses.issues?.list || createMockIssueList(defaultIssueCount),\n          status: 200,\n          headers: {},\n          url: 'https://api.github.com/repos/test-owner/test-repo/issues'\n        })),\n        get: jest.fn().mockImplementation(async ({ issue_number }: { issue_number: number }) => ({\n          data: customResponses.issues?.get?.[issue_number] || createMockIssue(issue_number, `Issue ${issue_number}`),\n          status: 200,\n          headers: {},\n          url: `https://api.github.com/repos/test-owner/test-repo/issues/${issue_number}`\n        })),\n        create: jest.fn().mockImplementation(async ({ title, body, ...options }: { \n          title: string; \n          body?: string; \n          [key: string]: any \n        }) => ({\n          data: createMockIssue(Date.now(), title, { body, ...options }),\n          status: 201,\n          headers: {},\n          url: 'https://api.github.com/repos/test-owner/test-repo/issues'\n        })),\n        update: jest.fn().mockImplementation(async ({ issue_number, ...updates }: { \n          issue_number: number;\n          [key: string]: any\n        }) => ({\n          data: createMockIssue(issue_number, `Updated Issue ${issue_number}`, updates),\n          status: 200,\n          headers: {},\n          url: `https://api.github.com/repos/test-owner/test-repo/issues/${issue_number}`\n        }))\n      }\n    },\n    graphql: jest.fn().mockImplementation(async (query: string, variables?: Record<string, any>) => {\n      // Si une réponse personnalisée est fournie pour cette requête, l'utiliser\n      const queryKey = query.replace(/\\s+/g, ' ').trim();\n      if (customResponses.graphql?.[queryKey]) {\n        return customResponses.graphql[queryKey](variables);\n      }\n      \n      // Réponse par défaut\n      return {\n        repository: {\n          id: 'R_123456',\n          name: 'test-repo',\n          owner: { login: 'test-owner' },\n          issues: {\n            nodes: createMockIssueList(3)\n          }\n        }\n      };\n    })\n  };\n  \n  return octokitMock as unknown as Octokit;\n}\n\n// Type pour les issues renvoyées par le mock\ninterface MockIssue {\n  id: number;\n  number: number;\n  title: string;\n  body: string;\n  state: string;\n  html_url: string;\n  labels: Array<{ id: number, name: string, color: string }>;\n  assignees: Array<{ login: string, id: number }>;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  user: {\n    login: string;\n    id: number;\n    avatar_url: string;\n    html_url: string;\n  };\n}\n\n/**\n * Crée un mock pour GitHubClient\n */\nexport function mockGitHubClient(options: OctokitMockOptions = {}): MockProxy<GitHubClient> & GitHubClient {\n  const clientMock = mock<GitHubClient>();\n  const mockIssueList = options.customResponses?.issues?.list || createMockIssueList(options.defaultIssueCount || 5);\n  \n  // Mock pour getRepository\n  clientMock.getRepository.mockResolvedValue({\n    id: 123456,\n    name: 'test-repo',\n    full_name: 'test-owner/test-repo',\n    private: false,\n    owner: {\n      login: 'test-owner',\n      id: 12345,\n      type: 'User'\n    },\n    html_url: 'https://github.com/test-owner/test-repo',\n    description: 'A test repository for unit tests',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    ...options.customResponses?.repo\n  });\n  \n  // Mock pour listIssues\n  clientMock.listIssues.mockResolvedValue(mockIssueList);\n  \n  // Mock pour getIssue\n  clientMock.getIssue.mockImplementation(async (issueNumber: number) => {\n    const customIssue = options.customResponses?.issues?.get?.[issueNumber];\n    if (customIssue) return customIssue;\n    \n    const issue = mockIssueList.find((i: MockIssue) => i.number === issueNumber);\n    if (issue) return issue;\n    \n    return createMockIssue(issueNumber, `Issue ${issueNumber}`);\n  });\n  \n  // Mock pour createIssue\n  clientMock.createIssue.mockImplementation(async (title: string, body?: string, opts?: any) => \n    createMockIssue(Date.now(), title, { body, ...opts })\n  );\n  \n  // Mock pour updateIssue\n  clientMock.updateIssue.mockImplementation(async (issueNumber: number, updates: any) => \n    createMockIssue(issueNumber, `Updated Issue ${issueNumber}`, updates)\n  );\n  \n  // Mock pour graphql\n  clientMock.graphql.mockImplementation(async (query: string, variables?: Record<string, any>) => {\n    // Si une réponse personnalisée est fournie pour cette requête, l'utiliser\n    const queryKey = query.replace(/\\s+/g, ' ').trim();\n    if (options.customResponses?.graphql?.[queryKey]) {\n      return options.customResponses.graphql[queryKey](variables);\n    }\n    \n    // Réponse par défaut\n    return {\n      repository: {\n        id: 'R_123456',\n        name: 'test-repo',\n        owner: { login: 'test-owner' },\n        issues: {\n          nodes: createMockIssueList(3)\n        }\n      }\n    };\n  });\n  \n  return clientMock;\n} "],"version":3}