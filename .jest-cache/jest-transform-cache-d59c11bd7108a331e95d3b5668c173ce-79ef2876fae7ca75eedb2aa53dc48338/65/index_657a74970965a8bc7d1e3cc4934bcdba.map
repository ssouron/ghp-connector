{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/config/index.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/config/index.ts"],"sourcesContent":["/**\n * Configuration Manager\n * Handles loading and merging configuration from different sources\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\n// Define configuration file name\nexport const CONFIG_FILENAME = '.ghprc.json';\n\n// Default configuration\nconst defaultConfig = {\n  github: {\n    owner: '',\n    repo: '',\n    baseUrl: 'https://api.github.com',\n  },\n  defaults: {\n    format: 'human',\n    issues: {\n      state: 'open',\n      limit: 10,\n      sort: 'created',\n      direction: 'desc',\n    },\n    projects: {},\n  },\n};\n\n// Define GitHub config interface\nexport interface GitHubConfig {\n  owner: string;\n  repo: string;\n  token?: string;\n  baseUrl?: string;\n}\n\n// Define configuration interface\nexport interface GHPConfig {\n  github: GitHubConfig;\n  defaults: {\n    format: 'human' | 'json' | 'table' | 'minimal';\n    issues: {\n      state: string;\n      limit?: number;\n      sort?: string;\n      direction?: string;\n      [key: string]: any;\n    };\n    projects: {\n      [key: string]: any;\n    };\n  };\n}\n\n/**\n * Find and load the configuration file\n * Searches in the following locations (in order):\n * 1. Current directory (./.ghprc.json)\n * 2. User's home directory (~/.ghprc.json)\n */\nexport function findConfigFile(): string | null {\n  // Check current directory\n  const currentDirConfig = path.join(process.cwd(), CONFIG_FILENAME);\n  if (fs.existsSync(currentDirConfig)) {\n    return currentDirConfig;\n  }\n\n  // Check home directory\n  const homeDirConfig = path.join(os.homedir(), CONFIG_FILENAME);\n  if (fs.existsSync(homeDirConfig)) {\n    return homeDirConfig;\n  }\n\n  return null;\n}\n\n/**\n * Load the configuration file\n */\nexport function loadConfigFile(filePath: string): Partial<GHPConfig> {\n  try {\n    const configContent = fs.readFileSync(filePath, 'utf-8');\n    return JSON.parse(configContent) as Partial<GHPConfig>;\n  } catch (error) {\n    throw new Error(`Failed to load config file: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Get environment variable configuration\n */\nexport function getEnvConfig(): Partial<GHPConfig> {\n  const github: Partial<GitHubConfig> = {};\n  \n  // Only set properties that are actually defined in environment variables\n  if (process.env.GITHUB_OWNER) {\n    github.owner = process.env.GITHUB_OWNER;\n  }\n  \n  if (process.env.GITHUB_REPO) {\n    github.repo = process.env.GITHUB_REPO;\n  }\n  \n  if (process.env.GITHUB_TOKEN) {\n    github.token = process.env.GITHUB_TOKEN;\n  }\n  \n  if (process.env.GITHUB_API_URL) {\n    github.baseUrl = process.env.GITHUB_API_URL;\n  }\n  \n  // Only include github config if at least one property is set\n  const envConfig: Partial<GHPConfig> = {};\n  if (Object.keys(github).length > 0) {\n    envConfig.github = github as GitHubConfig;\n  }\n  \n  return envConfig;\n}\n\n/**\n * Merge configurations from different sources\n * Priority (highest to lowest):\n * 1. Command line arguments\n * 2. Environment variables\n * 3. Config file\n * 4. Default values\n */\nexport function mergeConfigs(\n  cmdConfig: Partial<GHPConfig>,\n  envConfig: Partial<GHPConfig>,\n  fileConfig: Partial<GHPConfig>,\n): GHPConfig {\n  // Start with default config\n  const result = JSON.parse(JSON.stringify(defaultConfig)) as GHPConfig;\n  \n  // Merge in order of priority (lowest to highest)\n  return deepMerge(deepMerge(deepMerge(result, fileConfig), envConfig), cmdConfig);\n}\n\n/**\n * Deep merge two objects\n */\nfunction deepMerge<T>(target: T, source: Partial<T>): T {\n  if (!source) return target;\n  \n  const output = { ...target };\n  \n  Object.keys(source).forEach(key => {\n    const targetValue = (output as any)[key];\n    const sourceValue = (source as any)[key];\n    \n    if (\n      typeof sourceValue === 'object' && \n      sourceValue !== null && \n      !Array.isArray(sourceValue)\n    ) {\n      if (\n        typeof targetValue === 'object' && \n        targetValue !== null && \n        !Array.isArray(targetValue)\n      ) {\n        (output as any)[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        (output as any)[key] = { ...sourceValue };\n      }\n    } else if (sourceValue !== undefined) {\n      (output as any)[key] = sourceValue;\n    }\n  });\n  \n  return output;\n}\n\n/**\n * Convert command-line options to config structure\n */\nexport function cmdArgsToConfig(options: any): Partial<GHPConfig> {\n  const config: Partial<GHPConfig> = {};\n  \n  if (options.owner || options.repo) {\n    config.github = {} as GitHubConfig;\n    \n    if (options.owner) {\n      config.github.owner = options.owner;\n    }\n    \n    if (options.repo) {\n      config.github.repo = options.repo;\n    }\n  }\n  \n  if (options.format) {\n    if (!config.defaults) {\n      config.defaults = {} as GHPConfig['defaults'];\n    }\n    config.defaults.format = options.format;\n  }\n  \n  return config;\n}\n\n/**\n * Load configuration from all sources and merge them\n */\nexport function loadConfig(cmdArgs: Partial<GHPConfig> = {}): GHPConfig {\n  // Load config from environment\n  const envConfig = getEnvConfig();\n  \n  // Load config from file\n  let fileConfig: Partial<GHPConfig> = {};\n  const configPath = findConfigFile();\n  if (configPath) {\n    try {\n      fileConfig = loadConfigFile(configPath);\n    } catch (error) {\n      console.error(`Warning: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  // Merge all configs\n  return mergeConfigs(cmdArgs, envConfig, fileConfig);\n}\n\n/**\n * Create a new config file with default settings\n */\nexport function initConfigFile(filePath: string): void {\n  try {\n    const configStr = JSON.stringify(defaultConfig, null, 2);\n    fs.writeFileSync(filePath, configStr, 'utf-8');\n  } catch (error) {\n    throw new Error(`Failed to create config file: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Get default configuration as a template\n */\nexport function getDefaultConfig(): GHPConfig {\n  return JSON.parse(JSON.stringify(defaultConfig)) as GHPConfig;\n}\n\n/**\n * Validate configuration\n * Returns true if valid, throws error if invalid\n */\nexport function validateConfig(config: Partial<GHPConfig>): boolean {\n  // We'll add more validation in the future as needed\n  if (config.github) {\n    if (config.github.baseUrl) {\n      try {\n        new URL(config.github.baseUrl);\n      } catch (error) {\n        throw new Error(`Invalid baseUrl: ${config.github.baseUrl}`);\n      }\n    }\n  }\n  \n  return true;\n} "],"version":3}