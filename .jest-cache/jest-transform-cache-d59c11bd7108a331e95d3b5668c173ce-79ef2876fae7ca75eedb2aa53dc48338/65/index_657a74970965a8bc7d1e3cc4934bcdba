b5811f0abd058c97126f3fd8d83d96ba
"use strict";
/**
 * Configuration Manager
 * Handles loading and merging configuration from different sources
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIG_FILENAME = void 0;
exports.findConfigFile = findConfigFile;
exports.loadConfigFile = loadConfigFile;
exports.getEnvConfig = getEnvConfig;
exports.mergeConfigs = mergeConfigs;
exports.cmdArgsToConfig = cmdArgsToConfig;
exports.loadConfig = loadConfig;
exports.initConfigFile = initConfigFile;
exports.getDefaultConfig = getDefaultConfig;
exports.validateConfig = validateConfig;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
// Define configuration file name
exports.CONFIG_FILENAME = '.ghprc.json';
// Default configuration
const defaultConfig = {
    github: {
        owner: '',
        repo: '',
        baseUrl: 'https://api.github.com',
    },
    defaults: {
        format: 'human',
        issues: {
            state: 'open',
            limit: 10,
            sort: 'created',
            direction: 'desc',
        },
        projects: {},
    },
};
/**
 * Find and load the configuration file
 * Searches in the following locations (in order):
 * 1. Current directory (./.ghprc.json)
 * 2. User's home directory (~/.ghprc.json)
 */
function findConfigFile() {
    // Check current directory
    const currentDirConfig = path_1.default.join(process.cwd(), exports.CONFIG_FILENAME);
    if (fs_1.default.existsSync(currentDirConfig)) {
        return currentDirConfig;
    }
    // Check home directory
    const homeDirConfig = path_1.default.join(os_1.default.homedir(), exports.CONFIG_FILENAME);
    if (fs_1.default.existsSync(homeDirConfig)) {
        return homeDirConfig;
    }
    return null;
}
/**
 * Load the configuration file
 */
function loadConfigFile(filePath) {
    try {
        const configContent = fs_1.default.readFileSync(filePath, 'utf-8');
        return JSON.parse(configContent);
    }
    catch (error) {
        throw new Error(`Failed to load config file: ${error instanceof Error ? error.message : String(error)}`);
    }
}
/**
 * Get environment variable configuration
 */
function getEnvConfig() {
    const github = {};
    // Only set properties that are actually defined in environment variables
    if (process.env.GITHUB_OWNER) {
        github.owner = process.env.GITHUB_OWNER;
    }
    if (process.env.GITHUB_REPO) {
        github.repo = process.env.GITHUB_REPO;
    }
    if (process.env.GITHUB_TOKEN) {
        github.token = process.env.GITHUB_TOKEN;
    }
    if (process.env.GITHUB_API_URL) {
        github.baseUrl = process.env.GITHUB_API_URL;
    }
    // Only include github config if at least one property is set
    const envConfig = {};
    if (Object.keys(github).length > 0) {
        envConfig.github = github;
    }
    return envConfig;
}
/**
 * Merge configurations from different sources
 * Priority (highest to lowest):
 * 1. Command line arguments
 * 2. Environment variables
 * 3. Config file
 * 4. Default values
 */
function mergeConfigs(cmdConfig, envConfig, fileConfig) {
    // Start with default config
    const result = JSON.parse(JSON.stringify(defaultConfig));
    // Merge in order of priority (lowest to highest)
    return deepMerge(deepMerge(deepMerge(result, fileConfig), envConfig), cmdConfig);
}
/**
 * Deep merge two objects
 */
function deepMerge(target, source) {
    if (!source)
        return target;
    const output = { ...target };
    Object.keys(source).forEach(key => {
        const targetValue = output[key];
        const sourceValue = source[key];
        if (typeof sourceValue === 'object' &&
            sourceValue !== null &&
            !Array.isArray(sourceValue)) {
            if (typeof targetValue === 'object' &&
                targetValue !== null &&
                !Array.isArray(targetValue)) {
                output[key] = deepMerge(targetValue, sourceValue);
            }
            else {
                output[key] = { ...sourceValue };
            }
        }
        else if (sourceValue !== undefined) {
            output[key] = sourceValue;
        }
    });
    return output;
}
/**
 * Convert command-line options to config structure
 */
function cmdArgsToConfig(options) {
    const config = {};
    if (options.owner || options.repo) {
        config.github = {};
        if (options.owner) {
            config.github.owner = options.owner;
        }
        if (options.repo) {
            config.github.repo = options.repo;
        }
    }
    if (options.format) {
        if (!config.defaults) {
            config.defaults = {};
        }
        config.defaults.format = options.format;
    }
    return config;
}
/**
 * Load configuration from all sources and merge them
 */
function loadConfig(cmdArgs = {}) {
    // Load config from environment
    const envConfig = getEnvConfig();
    // Load config from file
    let fileConfig = {};
    const configPath = findConfigFile();
    if (configPath) {
        try {
            fileConfig = loadConfigFile(configPath);
        }
        catch (error) {
            console.error(`Warning: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    // Merge all configs
    return mergeConfigs(cmdArgs, envConfig, fileConfig);
}
/**
 * Create a new config file with default settings
 */
function initConfigFile(filePath) {
    try {
        const configStr = JSON.stringify(defaultConfig, null, 2);
        fs_1.default.writeFileSync(filePath, configStr, 'utf-8');
    }
    catch (error) {
        throw new Error(`Failed to create config file: ${error instanceof Error ? error.message : String(error)}`);
    }
}
/**
 * Get default configuration as a template
 */
function getDefaultConfig() {
    return JSON.parse(JSON.stringify(defaultConfig));
}
/**
 * Validate configuration
 * Returns true if valid, throws error if invalid
 */
function validateConfig(config) {
    // We'll add more validation in the future as needed
    if (config.github) {
        if (config.github.baseUrl) {
            try {
                new URL(config.github.baseUrl);
            }
            catch (error) {
                throw new Error(`Invalid baseUrl: ${config.github.baseUrl}`);
            }
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,