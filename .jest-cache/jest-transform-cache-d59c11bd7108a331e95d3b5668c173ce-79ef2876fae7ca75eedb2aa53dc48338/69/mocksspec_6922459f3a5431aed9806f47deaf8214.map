{"file":"/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks.spec.ts","mappings":"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","names":[],"sources":["/Users/stephanesouron/dev/beddy-bye-stories/ghp-connector/src/lib/test-helpers/mocks.spec.ts"],"sourcesContent":["/**\n * Tests des mocks pour les dépendances externes\n */\n\nimport * as fs from 'fs';\nimport { mockFs, mockVirtualFs } from './mocks/fs-mock';\nimport { mockOctokit, mockGitHubClient } from './mocks/octokit-mock';\nimport { mockEnv, mockGitHubEnv, mockCIEnv } from './mocks/env-mock';\n\ndescribe('Mocks pour les dépendances externes', () => {\n  describe('mockFs - Mock du système de fichiers', () => {\n    it('devrait permettre de mocker les opérations sur les fichiers', () => {\n      // Création du mock\n      const { fs: fsMock, restore } = mockFs();\n      \n      // Test des méthodes mockées\n      expect(fsMock.existsSync('test.txt')).toBe(false);\n      \n      // Restauration des fonctions originales\n      restore();\n    });\n    \n    it('devrait permettre de créer un système de fichiers virtuel', () => {\n      const initialFiles = {\n        '/test.txt': 'Contenu du fichier test',\n        '/config.json': '{ \"key\": \"value\" }'\n      };\n      \n      const { fs: fsMock, restore, getVirtualFs } = mockVirtualFs(initialFiles);\n      \n      // Vérification de l'existence des fichiers\n      expect(fsMock.existsSync('/test.txt')).toBe(true);\n      expect(fsMock.existsSync('/config.json')).toBe(true);\n      expect(fsMock.existsSync('/non-existant.txt')).toBe(false);\n      \n      // Lecture d'un fichier\n      expect(fsMock.readFileSync('/test.txt', 'utf8')).toBe('Contenu du fichier test');\n      \n      // Écriture dans un fichier\n      fsMock.writeFileSync('/new-file.txt', 'Nouveau contenu');\n      expect(fsMock.existsSync('/new-file.txt')).toBe(true);\n      expect(fsMock.readFileSync('/new-file.txt', 'utf8')).toBe('Nouveau contenu');\n      \n      // Suppression d'un fichier\n      fsMock.rmSync('/test.txt');\n      expect(fsMock.existsSync('/test.txt')).toBe(false);\n      \n      // Vérification du système de fichiers virtuel\n      const virtualFs = getVirtualFs();\n      expect(virtualFs['/config.json']).toBe('{ \"key\": \"value\" }');\n      expect(virtualFs['/new-file.txt']).toBe('Nouveau contenu');\n      expect(virtualFs['/test.txt']).toBeUndefined();\n      \n      // Restauration des fonctions originales\n      restore();\n    });\n  });\n  \n  describe('mockOctokit - Mock de l\\'API GitHub', () => {\n    it('devrait permettre de mocker les appels à l\\'API GitHub', async () => {\n      const octokit = mockOctokit();\n      \n      // Test d'une méthode mockée\n      const repoResponse = await octokit.rest.repos.get({\n        owner: 'test-owner',\n        repo: 'test-repo'\n      });\n      \n      expect(repoResponse.data.name).toBe('test-repo');\n      expect(repoResponse.data.owner.login).toBe('test-owner');\n      \n      // Test de la méthode issues.listForRepo\n      const issuesResponse = await octokit.rest.issues.listForRepo({\n        owner: 'test-owner',\n        repo: 'test-repo'\n      });\n      \n      expect(Array.isArray(issuesResponse.data)).toBe(true);\n      expect(issuesResponse.data.length).toBe(5); // Valeur par défaut\n    });\n    \n    it('devrait permettre de mocker le client GitHub', async () => {\n      const client = mockGitHubClient();\n      \n      // Test des méthodes mockées\n      const repo = await client.getRepository();\n      expect(repo.name).toBe('test-repo');\n      \n      const issues = await client.listIssues();\n      expect(Array.isArray(issues)).toBe(true);\n      \n      const issue = await client.getIssue(123);\n      expect(issue.number).toBe(123);\n      expect(issue.title).toBe('Issue 123');\n    });\n  });\n  \n  describe('mockEnv - Mock des variables d\\'environnement', () => {\n    it('devrait permettre de mocker les variables d\\'environnement', () => {\n      const originalNodeEnv = process.env.NODE_ENV;\n      \n      // Création du mock\n      const restore = mockEnv({\n        vars: {\n          NODE_ENV: 'test',\n          TEST_VAR: 'test-value'\n        },\n        unset: ['HOME']\n      });\n      \n      // Vérification des variables\n      expect(process.env.NODE_ENV).toBe('test');\n      expect(process.env.TEST_VAR).toBe('test-value');\n      expect(process.env.HOME).toBeUndefined();\n      \n      // Restauration des variables originales\n      restore();\n      \n      // Vérification de la restauration\n      expect(process.env.NODE_ENV).toBe(originalNodeEnv);\n      expect(process.env.TEST_VAR).toBeUndefined();\n    });\n    \n    it('devrait fournir des mocks prédéfinis pour GitHub', () => {\n      const restore = mockGitHubEnv();\n      \n      expect(process.env.GITHUB_TOKEN).toBe('mock-github-token-for-tests');\n      expect(process.env.GITHUB_API_URL).toBe('https://api.github.com');\n      expect(process.env.GITHUB_REPOSITORY).toBe('test-owner/test-repo');\n      \n      restore();\n    });\n    \n    it('devrait fournir des mocks prédéfinis pour l\\'environnement CI', () => {\n      const restore = mockCIEnv();\n      \n      expect(process.env.CI).toBe('true');\n      expect(process.env.GITHUB_ACTIONS).toBe('true');\n      expect(process.env.GITHUB_TOKEN).toBe('mock-github-token-for-ci');\n      \n      restore();\n    });\n  });\n}); "],"version":3}